name: argmin CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  HOST: x86_64-unknown-linux-gnu
  OPENBLAS_TARGET: sse_generic

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Install dependencies
        run: sudo apt-get install cmake gfortran libelf-dev libdw-dev binutils-dev libiberty-dev liblapacke-dev libopenblas-dev gcc
      - name: Build (default features)
        run: cargo build --verbose --all
      - name: Test (default features)
        run: cargo test --verbose --all
      - name: Build (all features)
        run: cargo build --verbose --all --all-features
      - name: Test (all features)
        run: cargo test --verbose --all --all-features

  test-serde1-feature:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Build (no default features)
        run: cargo build --verbose --all --no-default-features
      - name: Test (no default features)
        run: cargo test --verbose --all --no-default-features
      - name: Test with serde1 feature
        run: cargo test --verbose --all --no-default-features --features "serde1"
      - name: Test with slog-logger feature
        run: cargo test --verbose --all --no-default-features --features "slog-logger"

  clippy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - beta
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: clippy
      - name: Clippy with default features
        run: cargo clippy --all-targets -- -D warnings
      - name: Clippy without default features
        run: cargo clippy --all-targets --no-default-features -- -D warnings
      - name: Clippy without serde1 feature
        run: cargo clippy --all-targets --no-default-features --features="ndarrayl,nalgebral,visualizer,slog-logger" -- -D warnings
      - name: Clippy with all features
        run: cargo clippy --all-targets --all-features -- -D warnings

  rustfmt:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, rust-src
      - run: cargo fmt -- --check

  docs-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - run: cargo rustdoc --all-features -- -D warnings
  
  wasm-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Install toolchains
        run: |
          rustup target add wasm32-unknown-unknown
          rustup target add wasm32-unknown-emscripten
          rustup target add wasm32-wasi
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh 
      - name: Build target wasm32-unknown-unknown
        run: cargo build --target wasm32-unknown-unknown --features wasm-bindgen
      - name: Build target wasm32-wasi with feature stdweb
        run: cargo build --target wasm32-wasi --features stdweb
      - name: Build target wasm32-wasi with feature wasm-bindgen
        run: cargo build --target wasm32-wasi --features wasm-bindgen
      - name: Build target wasm32-unknown-emscripten
        run: cargo build --target wasm32-unknown-emscripten --no-default-features --features wasm-bindgen
