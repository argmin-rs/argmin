var searchIndex = JSON.parse('{\
"argmin":{"doc":"argmin is a numerical optimization library written â€¦","t":"OOOOAOOALLLEINNNIIDDNQQIQIQNNNDIQDNECIDNSCNNNIDQQQQQQQQQDNDIIINNININNEECNLLKLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLKLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLKLLLLKLLLLLLKLLLLLLLKLLLLKLLLKLLLKLLLLLLLLLLLLLLLLLLKLLLLLKLLLKLLLKLLLLMKLLLLKLLMKLLLLMLLLLLLLLLLLLLLLLMLKLLLLLLLLLLLLLLLMMMKLLMLLMMMMALLLMMMLLKLLLLLLLLKALLLLLLLLLLLLMMLLMMMMMMMMMMMMMMMMMLLMMLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLMMMLLLLKLLLLLLMMMALKLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLMMMMMMMNIENDNLLLLLLLLLLMLLMLLLKLMLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLNNNNIEDLLLLLLLLLLLLALLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLNNDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLDDIDLLLLLLLLLLLLALLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLINNQQQEDNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["argmin_error","argmin_error_closure","bulk","check_param","core","float","kv","solver","A","A","A","ArgminError","ArgminFloat","Bool","CheckpointNotFound","ConditionViolated","CostFunction","DeserializeOwnedAlias","Error","Executor","Float","Float","Float","Gradient","Gradient","Hessian","Hessian","ImpossibleError","Int","InvalidParameter","IterState","Jacobian","Jacobian","KV","KeyboardInterrupt","KvValue","LineSearch","LinearProgram","LinearProgramState","MaxItersReached","NAME","NLCGBetaUpdate","NotImplemented","NotInitialized","NotTerminated","Operator","OptimizationResult","Output","Output","Param","Param","Param","Param","Param","Param","Param","PopulationState","PotentialBug","Problem","SendAlias","SerializeAlias","Solver","SolverConverged","SolverExit","State","Str","SyncAlias","TargetCostReached","Terminated","TerminationReason","TerminationStatus","TrustRegionRadius","Uint","add_observer","anneal","apply","apply","as_ref","as_ref","b","b","b","backtrace","best_cost","best_cost","best_cost","best_individual","best_param","best_param","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bulk_apply","bulk_apply","bulk_apply","bulk_cost","bulk_cost","bulk_cost","bulk_gradient","bulk_gradient","bulk_gradient","bulk_hessian","bulk_hessian","bulk_hessian","bulk_jacobian","bulk_jacobian","bulk_jacobian","bulk_problem","c","c","c","chain","checkpointing","checkpointing","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","configure","consume_func_counts","consume_problem","context","cost","cost","cost","cost","cost","cost","cost","cost","counts","counts","counts","counts","ctrlc","default","default","default","default","default","default","deref","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","downcast","downcast_mut","downcast_ref","drop","eq","eq","eq","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","func_counts","func_counts","func_counts","func_counts","get","get_best_cost","get_best_cost","get_best_cost","get_best_cost","get_best_cost","get_best_cost","get_best_param","get_best_param","get_best_param","get_best_param","get_bool","get_cost","get_cost","get_cost","get_cost","get_cost","get_cost","get_float","get_func_counts","get_func_counts","get_func_counts","get_func_counts","get_gradient","get_hessian","get_int","get_inv_hessian","get_iter","get_iter","get_iter","get_iter","get_jacobian","get_last_best_iter","get_last_best_iter","get_last_best_iter","get_last_best_iter","get_max_iters","get_max_iters","get_max_iters","get_max_iters","get_param","get_param","get_param","get_param","get_population","get_prev_best_cost","get_prev_best_cost","get_prev_best_individual","get_prev_best_param","get_prev_cost","get_prev_cost","get_prev_gradient","get_prev_hessian","get_prev_individual","get_prev_inv_hessian","get_prev_jacobian","get_prev_param","get_problem","get_string","get_target_cost","get_target_cost","get_target_cost","get_target_cost","get_target_cost","get_target_cost","get_termination_reason","get_termination_reason","get_termination_reason","get_termination_reason","get_termination_status","get_termination_status","get_termination_status","get_termination_status","get_time","get_time","get_time","get_time","get_uint","grad","gradient","gradient","gradient","hash","hash","hessian","hessian","hessian","hessian","increment_iter","increment_iter","increment_iter","increment_iter","individual","individual","init","init","insert","into","into","into","into","into","into","into","into","into","into","into","into","inv_hessian","inv_hessian","is","is_best","is_best","is_best","is_best","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","iter","iter","iter","jacobian","jacobian","jacobian","jacobian","keys","kind","kv","last_best_iter","last_best_iter","last_best_iter","macros","max_iters","max_iters","max_iters","max_iters","max_iters","max_iters","merge","msg","new","new","new","new","new","new","new","new","new","next_iter","observers","parallelize","parallelize","parallelize","parallelize","parallelize","parallelize","parallelize","parallelize","parallelize","parallelize","param","param","param","param","partial_cmp","population","population","prev_best_cost","prev_best_cost","prev_best_cost","prev_best_individual","prev_best_param","prev_best_param","prev_cost","prev_cost","prev_cost","prev_grad","prev_hessian","prev_individual","prev_inv_hessian","prev_jacobian","prev_param","prev_param","problem","problem","problem","problem","reset","root_cause","run","serialize","serialize","serialize","serialize","serialize","serialize","solver","solver","state","state","take_best_individual","take_best_param","take_gradient","take_hessian","take_individual","take_inv_hessian","take_jacobian","take_param","take_population","take_prev_best_individual","take_prev_best_param","take_prev_gradient","take_prev_hessian","take_prev_individual","take_prev_inv_hessian","take_prev_jacobian","take_prev_param","take_problem","target_cost","target_cost","target_cost","target_cost","target_cost","target_cost","terminate","terminate","terminate_internal","terminate_internal","terminate_with","terminate_with","terminate_with","terminate_with","terminated","terminated","terminated","termination_status","termination_status","termination_status","test_utils","text","time","time","time","time","time","time","time","timer","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update","update","update","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","text","text","text","text","text","text","text","Always","Checkpoint","CheckpointingFrequency","Every","FileCheckpoint","Never","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","directory","eq","eq","filename","fmt","fmt","fmt","frequency","frequency","frequency","from","from","from_subset","from_subset","hash","hash","into","into","is_in_subset","is_in_subset","load","load","new","save","save","save_cond","to_owned","to_owned","to_string","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Always","Every","Never","NewBest","Observe","ObserverMode","Observers","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deserialize","eq","file","fmt","from","from","from_subset","from_subset","into","into","is_empty","is_in_subset","is_in_subset","new","observe_init","observe_init","observe_iter","observe_iter","push","serialize","slog_logger","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Bincode","JSON","WriteToFile","WriteToFileSerializer","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","eq","fmt","fmt","from","from","from_subset","from_subset","into","into","is_in_subset","is_in_subset","new","observe_iter","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SlogLogger","borrow","borrow_mut","clone","clone_into","file","file_noblock","from","from_subset","into","is_in_subset","observe_init","observe_iter","term","term_noblock","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","TestProblem","TestSolver","TestSparseProblem","anneal","apply","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cost","cost","default","default","default","deserialize","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_subset","from_subset","from_subset","gradient","gradient","hash","hash","hessian","into","into","into","is_in_subset","is_in_subset","is_in_subset","jacobian","new","new","new","next_iter","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","brent","conjugategradient","gaussnewton","goldensectionsearch","gradientdescent","landweber","linesearch","neldermead","newton","particleswarm","quasinewton","simulatedannealing","trustregion","BrentOpt","BrentRoot","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","from","from","from_subset","from_subset","init","init","into","into","is_in_subset","is_in_subset","new","new","next_iter","next_iter","serialize","serialize","set_tolerance","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ConjugateGradient","NonlinearConjugateGradient","beta","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","from","from","from_subset","from_subset","get_prev_p","init","init","into","into","is_in_subset","is_in_subset","new","new","next_iter","next_iter","restart_iters","restart_orthogonality","serialize","serialize","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","FletcherReeves","HestenesStiefel","NLCGBetaUpdate","PolakRibiere","PolakRibierePlus","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","deserialize","deserialize","deserialize","deserialize","fmt","fmt","fmt","fmt","from","from","from","from","from_subset","from_subset","from_subset","from_subset","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","new","new","new","new","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update","update","update","update","update","vzip","vzip","vzip","vzip","GaussNewton","GaussNewtonLS","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deserialize","deserialize","from","from","from_subset","from_subset","into","into","is_in_subset","is_in_subset","new","new","next_iter","next_iter","serialize","serialize","terminate","terminate","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_gamma","with_tolerance","with_tolerance","GoldenSectionSearch","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","init","into","is_in_subset","new","next_iter","serialize","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","with_tolerance","SteepestDescent","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","into","is_in_subset","new","next_iter","serialize","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Landweber","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","into","is_in_subset","new","next_iter","serialize","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","BacktrackingLineSearch","HagerZhangLineSearch","LineSearch","MoreThuenteLineSearch","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","condition","default","default","deserialize","deserialize","deserialize","eq","fmt","from","from","from","from_subset","from_subset","from_subset","init","init","init","initial_step_length","initial_step_length","initial_step_length","initial_step_length","into","into","into","is_in_subset","is_in_subset","is_in_subset","new","new","new","next_iter","next_iter","next_iter","rho","search_direction","search_direction","search_direction","search_direction","serialize","serialize","serialize","terminate","terminate","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with_bounds","with_bounds","with_c","with_delta_sigma","with_epsilon","with_eta","with_gamma","with_theta","with_width_tolerance","ArmijoCondition","GoldsteinCondition","LineSearchCondition","StrongWolfeCondition","WolfeCondition","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","evaluate_condition","evaluate_condition","evaluate_condition","evaluate_condition","evaluate_condition","fmt","fmt","fmt","fmt","from","from","from","from","from_subset","from_subset","from_subset","from_subset","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","new","new","new","new","requires_current_gradient","requires_current_gradient","requires_current_gradient","requires_current_gradient","requires_current_gradient","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","NelderMead","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","init","into","is_in_subset","new","next_iter","serialize","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","with_alpha","with_gamma","with_rho","with_sd_tolerance","with_sigma","Newton","NewtonCG","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deserialize","deserialize","from","from","from_subset","from_subset","into","into","is_in_subset","is_in_subset","new","new","next_iter","next_iter","serialize","serialize","terminate","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_curvature_threshold","with_gamma","with_tolerance","Particle","ParticleSwarm","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cost","deserialize","deserialize","eq","fmt","from","from","from_subset","from_subset","init","into","into","is_in_subset","is_in_subset","new","new","next_iter","position","serialize","serialize","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_cognitive_factor","with_inertia_factor","with_social_factor","BFGS","DFP","LBFGS","SR1","SR1TrustRegion","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","deserialize","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","init","init","init","init","init","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","new","new","new","new","new","next_iter","next_iter","next_iter","next_iter","next_iter","serialize","serialize","serialize","serialize","serialize","terminate","terminate","terminate","terminate","terminate","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","with_denominator_factor","with_denominator_factor","with_eta","with_l1_regularization","with_radius","with_tolerance_cost","with_tolerance_cost","with_tolerance_cost","with_tolerance_grad","with_tolerance_grad","with_tolerance_grad","with_tolerance_grad","with_tolerance_grad","Anneal","Boltzmann","Exponential","Float","Output","Param","SATempFunc","SimulatedAnnealing","TemperatureFast","anneal","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deserialize","deserialize","eq","fmt","from","from","from_subset","from_subset","init","into","into","is_in_subset","is_in_subset","new","new_with_rng","next_iter","serialize","serialize","terminate","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_reannealing_accepted","with_reannealing_best","with_reannealing_fixed","with_stall_accepted","with_stall_best","with_temp_func","CauchyPoint","Dogleg","Steihaug","TrustRegion","TrustRegionRadius","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","deserialize","deserialize","deserialize","deserialize","eq","eq","fmt","fmt","from","from","from","from","from_subset","from_subset","from_subset","from_subset","init","init","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","new","new","new","new","next_iter","next_iter","next_iter","next_iter","partial_cmp","partial_cmp","reduction_ratio","serialize","serialize","serialize","serialize","set_radius","set_radius","set_radius","set_radius","terminate","terminate","terminate","terminate","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","with_epsilon","with_eta","with_max_iters","with_max_radius","with_radius"],"q":[[0,"argmin"],[8,"argmin::core"],[604,"argmin::core::ArgminError"],[611,"argmin::core::checkpointing"],[668,"argmin::core::observers"],[720,"argmin::core::observers::file"],[761,"argmin::core::observers::slog_logger"],[783,"argmin::core::test_utils"],[860,"argmin::solver"],[873,"argmin::solver::brent"],[916,"argmin::solver::conjugategradient"],[962,"argmin::solver::conjugategradient::beta"],[1052,"argmin::solver::gaussnewton"],[1098,"argmin::solver::goldensectionsearch"],[1121,"argmin::solver::gradientdescent"],[1141,"argmin::solver::landweber"],[1161,"argmin::solver::linesearch"],[1250,"argmin::solver::linesearch::condition"],[1349,"argmin::solver::neldermead"],[1376,"argmin::solver::newton"],[1421,"argmin::solver::particleswarm"],[1468,"argmin::solver::quasinewton"],[1591,"argmin::solver::simulatedannealing"],[1649,"argmin::solver::trustregion"],[1755,"alloc::vec"],[1756,"core::result"],[1757,"core::error"],[1758,"std::backtrace"],[1759,"core::borrow"],[1760,"core::ops::function"],[1761,"anyhow"],[1762,"core::clone"],[1763,"core::cmp"],[1764,"core::fmt"],[1765,"core::marker"],[1766,"core::marker"],[1767,"serde::de"],[1768,"serde::de"],[1769,"core::cmp"],[1770,"core::fmt"],[1771,"std::collections::hash::map"],[1772,"core::time"],[1773,"core::hash"],[1774,"slog"],[1775,"slog"],[1776,"serde::ser"],[1777,"core::convert"],[1778,"argmin_math"],[1779,"argmin_math"],[1780,"rand_xoshiro::xoshiro256plusplus"],[1781,"core::cmp"]],"d":["Create an <code>ArgminError</code> with a provided message.","Create an <code>ArgminError</code> with a provided message wrapped in a â€¦","Creates the <code>bulk_X</code> methods.","Release an <code>T</code> from an <code>Option&lt;T&gt;</code> if it is not <code>None</code>. If it is â€¦","argmin optimization toolbox core","Convert a constant to a float of given precision","Creates an <code>KV</code> at compile time","Solvers","TODO A for linear programs","TODO A for linear programs","Calls <code>A</code> defined in the <code>LinearProgram</code> trait.","Argmin error type","An alias for float types (<code>f32</code>, <code>f64</code>) which combines â€¦","Boolean values","Checkpoint was not found","Indicates that a condition is violated","Defines computation of a cost function value","Trait alias for <code>serde</code>s <code>DeserializeOwned</code>.","The <code>Error</code> type, a wrapper around a dynamic error type.","Solves an optimization problem with a solver","Floating point values","Precision of floats","Floating point precision (f32 or f64)","Defines the computation of the gradient.","Type of the gradient","Defines the computation of the Hessian.","Type of the Hessian","Indicates an impossible error","Signed integers","Indicates and invalid parameter","Maintains the state from iteration to iteration of a solver","Defines the computation of the Jacobian.","Type of the Jacobian","A simple key-value storage","Algorithm manually interrupted with Ctrl+C","Types available for use in <code>KV</code>.","","Defines a linear Program","Maintains the state from iteration to iteration of a solver","Reached maximum number of iterations","Name of the solver. Mainly used in Observers.","","Indicates that a function is not implemented","Indicates that a function is not initialized","Execution is running","Defines the application of an operator to a parameter â€¦","Result of an optimization returned by after running an â€¦","Type of the return value of the operator","Type of the return value of the cost function","Type of the parameter vector","Type of the parameter vector","Type of the parameter vector","Type of the parameter vector","Type of the parameter vector","Type of the parameter vector","Type of parameter vector","Maintains the state from iteration to iteration of a â€¦","For errors which are likely bugs.","Wrapper around problems defined by users.","Trait alias for <code>Send</code>","Trait alias for <code>serde</code>s <code>Serialize</code>.","The interface all solvers are required to implement.","Converged","Solver exit with given reason","Minimal interface which struct used for managing state in â€¦","Strings","Trait alias for <code>Sync</code>","Reached target cost function value","Execution is terminated","Reasons for optimization algorithms to stop","Status of optimization execution","","Unsigned integers","Adds an observer to the executor. Observers are required â€¦","Calls <code>anneal</code> defined in the <code>Anneal</code> trait and keeps track â€¦","Applies the operator to parameters","Calls <code>apply</code> defined in the <code>Operator</code> trait and keeps track â€¦","","","TODO b for linear programs","TODO b for linear programs","Calls <code>b</code> defined in the <code>LinearProgram</code> trait.","Get the backtrace for this Error.","Current best cost function value","Current best cost function value","Current best cost function value","Current best individual vector","Current best parameter vector","Current best parameter vector","","","","","","","","","","","","","","","","","","","","","","","","","Compute <code>apply</code> in bulk. If the <code>rayon</code> feature is enabled, â€¦","Compute <code>apply</code> in bulk. If the <code>rayon</code> feature is enabled, â€¦","Calls <code>bulk_apply</code> defined in the <code>Operator</code> trait and keeps â€¦","Compute <code>cost</code> in bulk. If the <code>rayon</code> feature is enabled, â€¦","Compute <code>cost</code> in bulk. If the <code>rayon</code> feature is enabled, â€¦","Calls <code>bulk_cost</code> defined in the <code>CostFunction</code> trait and â€¦","Compute <code>gradient</code> in bulk. If the <code>rayon</code> feature is enabled, â€¦","Compute <code>gradient</code> in bulk. If the <code>rayon</code> feature is enabled, â€¦","Calls <code>bulk_gradient</code> defined in the <code>Gradient</code> trait and â€¦","Compute <code>hessian</code> in bulk. If the <code>rayon</code> feature is enabled, â€¦","Compute <code>hessian</code> in bulk. If the <code>rayon</code> feature is enabled, â€¦","Calls <code>bulk_hessian</code> defined in the <code>Hessian</code> trait and keeps â€¦","Compute <code>jacobian</code> in bulk. If the <code>rayon</code> feature is enabled, â€¦","Compute <code>jacobian</code> in bulk. If the <code>rayon</code> feature is enabled, â€¦","Calls <code>bulk_jacobian</code> defined in the <code>Jacobian</code> trait and â€¦","Gives access to the stored <code>problem</code> via the closure <code>func</code> â€¦","TODO c for linear programs Those three could maybe be â€¦","TODO c for linear programs Those three could maybe be â€¦","Calls <code>c</code> defined in the <code>LinearProgram</code> trait.","An iterator of the chain of source errors contained by â€¦","Checkpointing","Configures checkpointing","","","","","","","","","","","","","","","","","","","Two <code>OptimizationResult</code>s are equal if the absolute of the â€¦","This method gives mutable access to the internal state of â€¦","Consumes another instance of <code>Problem</code> by summing ob the â€¦","Consumes another instance of <code>Problem</code>. The internally â€¦","Wrap the error value with additional context.","Compute cost function","Calls <code>cost</code> defined in the <code>CostFunction</code> trait and keeps â€¦","Set the current cost function value. This shifts the â€¦","Set the current cost function value. This shifts the â€¦","Set the current cost function value. This shifts the â€¦","Current cost function value","Current cost function value","Current cost function value","Keeps track of how often methods of <code>problem</code> have been â€¦","Evaluation counts","Evaluation counts","Evaluation counts","Enables or disables CTRL-C handling (default: enabled). â€¦","","","","","","","","","","","","","","Attempt to downcast the error object to a concrete type.","Downcast this error object by mutable reference.","Downcast this error object by reference.","","","","Two <code>OptimizationResult</code>s are equal if the absolute of the â€¦","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Set all function evaluation counts to the evaluation â€¦","Set all function evaluation counts to the evaluation â€¦","Set all function evaluation counts to the evaluation â€¦","Set all function evaluation counts to the evaluation â€¦","Retrieve an element from the KV by key","Returns best cost function value","Returns current best cost function value.","Returns the current best cost function value","Returns current best cost function value.","Returns the current best cost function value","Returns current best cost function value.","Returns a reference to the current best parameter vector","Returns a reference to the current best parameter vector","Returns a reference to the current best parameter vector","Returns a reference to the current best individual","Extract bool from <code>KvValue</code>","Returns current cost function value","Returns the current cost function value","Returns current cost function value.","Returns current cost function value.","Returns the current cost function value","Returns current cost function value.","Extract float from <code>KvValue</code>","Returns current cost function evaluation count","Returns function evaluation counts","Returns function evaluation counts","Returns function evaluation counts","Returns a reference to the gradient","Returns a reference to the current Hessian","Extract int from <code>KvValue</code>","Returns a reference to the current inverse Hessian","Returns current number of iterations","Returns current number of iterations.","Returns current number of iterations.","Returns current number of iterations.","Returns a reference to the current Jacobian","Returns iteration number where the last best parameter â€¦","Returns iteration number of last best parameter vector.","Returns iteration number of last best parameter vector.","Returns iteration number of last best individual","Returns maximum number of iterations that are to be â€¦","Returns the maximum number of iterations.","Returns the maximum number of iterations.","Returns the maximum number of iterations.","Returns a reference to the current parameter vector","Returns a reference to the current parameter vector","Returns a reference to the current parameter vector","Returns a reference to the current individual","Returns a reference to the population","Returns the previous best cost function value","Returns the previous best cost function value","Returns a reference to previous best individual","Returns a reference to previous best parameter vector","Returns the previous cost function value","Returns the previous cost function value","Returns a reference to the previous gradient","Returns a reference to the previous Hessian","Returns a reference to previous individual","Returns a reference to the previous inverse Hessian","Returns a reference to the previous Jacobian","Returns a reference to previous parameter vector","Returns the internally stored user defined problem by â€¦","Extract String from <code>KvValue</code>","Returns target cost","Returns the target cost function value","Returns target cost function value.","Returns target cost function value.","Returns target cost function value.","Returns the target cost function value","Returns the termination reason if terminated, otherwise â€¦","Returns the termination reason if terminated, otherwise â€¦","Returns the termination reason if terminated, otherwise â€¦","Returns the termination reason if terminated, otherwise â€¦","Returns termination status.","Returns the termination status.","Returns the termination status.","Returns the termination reason.","Get time passed since the beginning of the optimization â€¦","Returns the time elapsed since the start of the â€¦","Returns the time elapsed since the start of the â€¦","Returns the time elapsed since the start of the â€¦","Extract unsigned int from <code>KvValue</code>","Current gradient","Compute gradient","Calls <code>gradient</code> defined in the <code>Gradient</code> trait and keeps â€¦","Set gradient. This shifts the stored gradient to the â€¦","","","Compute Hessian","Calls <code>hessian</code> defined in the <code>Hessian</code> trait and keeps track â€¦","Set Hessian. This shifts the stored Hessian to the â€¦","Current Hessian","Increment the number of iterations by one","Increments the number of iterations by one","Increments the number of iterations by one","Increments the number of iterations by one","Set best individual of current iteration. This shifts the â€¦","Current individual vector","Initializes the algorithm.","Initializes the algorithm.","Insert a key-value pair","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set inverse Hessian. This shifts the stored inverse â€¦","Current inverse Hessian","Returns true if <code>E</code> is the type held by this error object.","Returns whether the current parameter vector is also the â€¦","Returns whether the current parameter vector is also the â€¦","Returns whether the current parameter vector is also the â€¦","Returns whether the current individual is also the best â€¦","","","","","","","","","","","","","Current iteration","Current iteration","Current iteration","Compute Jacobian","Calls <code>jacobian</code> defined in the <code>Jacobian</code> trait and keeps â€¦","Set Jacobian. This shifts the stored Jacobian to the â€¦","Current Jacobian","Returns all available keys and their <code>KvValue</code> kind","Returns the kind of the <code>KvValue</code>","The actual key value storage","Iteration number of last best cost","Iteration number of last best cost","Iteration number of last best cost","Macros","Set maximum number of iterations","Set maximum number of iterations","Set maximum number of iterations","Maximum number of iterations","Maximum number of iterations","Maximum number of iterations","Merge with another <code>KV</code>","Create a new error object from a printable error message.","Construct a new state","Constructs an <code>Executor</code> from a user defined problem and a â€¦","Create a new error object from any error type.","Constructor a new empty <code>KV</code>","Wraps a problem into an instance of <code>Problem</code>.","Constructs a new instance of <code>OptimizationResult</code> from a â€¦","Create a new IterState instance","Create new <code>LinearProgramState</code> instance","Create a new PopulationState instance","Computes a single iteration of the algorithm and has â€¦","Observers","Indicates whether to parallelize calls to <code>apply</code> when using â€¦","Indicates whether to parallelize calls to <code>apply</code> when using â€¦","Indicates whether to parallelize calls to <code>cost</code> when using â€¦","Indicates whether to parallelize calls to <code>cost</code> when using â€¦","Indicates whether to parallelize calls to <code>gradient</code> when â€¦","Indicates whether to parallelize calls to <code>gradient</code> when â€¦","Indicates whether to parallelize calls to <code>hessian</code> when â€¦","Indicates whether to parallelize calls to <code>hessian</code> when â€¦","Indicates whether to parallelize calls to <code>jacobian</code> when â€¦","Indicates whether to parallelize calls to <code>jacobian</code> when â€¦","Set parameter vector. This shifts the stored parameter â€¦","Set parameter vector. This shifts the stored parameter â€¦","Current parameter vector","Current parameter vector","Two <code>OptimizationResult</code>s are equal if the absolute of the â€¦","Set population.","All members of the population","Previous best cost function value","Previous best cost function value","Previous best cost function value","Previous best individual vector","Previous best parameter vector","Previous best parameter vector","Previous cost function value","Previous cost function value","Previous cost function value","Previous gradient","Previous Hessian","Previous individual vector","Previous inverse Hessian","Previous Jacobian","Previous parameter vector","Previous parameter vector","Gives access to the stored <code>problem</code> via the closure <code>func</code> â€¦","Returns a reference to the stored problem.","Problem defined by user","Problem","Resets the function evaluation counts to zero.","The lowest level cause of this error â€” this errorâ€™s â€¦","Runs the executor by applying the solver to the â€¦","","","","","","","Returns a reference to the stored solver.","Solver","Returns a reference to the stored state.","Iteration state","Moves the best individual out and replaces it internally â€¦","Moves the best parameter vector out and replaces it â€¦","Moves the gradient out and replaces it internally with <code>None</code>","Moves the Hessian out and replaces it internally with <code>None</code>","Moves the current individual out and replaces it â€¦","Moves the inverse Hessian out and replaces it internally â€¦","Moves the Jacobian out and replaces it internally with <code>None</code>","Moves the current parameter vector out and replaces it â€¦","Takes population and replaces it internally with <code>None</code>.","Moves the previous best individual out and replaces it â€¦","Moves the previous best parameter vector out and replaces â€¦","Moves the gradient out and replaces it internally with <code>None</code>","Moves the previous Hessian out and replaces it internally â€¦","Moves the previous individual out and replaces it â€¦","Moves the previous Hessian out and replaces it internally â€¦","Moves the previous Jacobian out and replaces it internally â€¦","Moves the previous parameter vector out and replaces it â€¦","Returns the internally stored problem and replaces it with â€¦","Set target cost.","Set target cost.","Set target cost.","Target cost function value","Target cost function value","Target cost function value","Used to implement stopping criteria, in particular â€¦","Used to implement stopping criteria, in particular â€¦","Checks whether basic termination reasons apply.","Checks whether basic termination reasons apply.","Sets the termination status to <code>Terminated</code> with the given â€¦","Sets the termination status to <code>Terminated</code> with the given â€¦","Sets the termination status to <code>Terminated</code> with the given â€¦","Sets the termination status to <code>Terminated</code> with the given â€¦","Return whether the algorithm has terminated or not","Return whether the algorithm has terminated or not","Returns <code>true</code> if a solver terminated and <code>false</code> otherwise.","Status of optimization execution","Status of optimization execution","Status of optimization execution","Convenience utilities for testing","Returns a textual representation of what happened.","Set time required since the beginning of the optimization â€¦","Sets the time required so far.","Sets the time required so far.","Sets the time required so far.","Time required so far","Time required so far","Time required so far","Enables or disables timing of individual iterations â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This method is called after each iteration and checks if â€¦","Checks if the current parameter vector is better than the â€¦","Checks if the current parameter vector is better than the â€¦","Checks if the current individual is better than the â€¦","","","","","","","","","","","","","Text","Text","Text","Text","Text","Text","Text","Create checkpoint in every iteration","An interface for checkpointing methods","Defines at which intervals a checkpoint is saved.","Create checkpoint every N iterations","Handles saving a checkpoint to disk as a binary file.","Never create checkpoint","","","","","","","","","Create a default <code>FileCheckpoint</code> instance.","","Directory where the checkpoints are saved to","","","Name of the checkpoint files","","","","Indicates how often checkpoints should be saved","Returns the how often a checkpoint is to be saved.","Indicates how often a checkpoint is created","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Loads a saved checkpoint","Load a checkpoint from disk.","Create a new <code>FileCheckpoint</code> instance","Save a checkpoint","Writes checkpoint to disk.","Saves a checkpoint when the checkpointing condition is met.","","","","","","","","","","","","","","","","Call observer in every iteration","Call observer every N iterations","Never call the observer","Call observer when new best is found","An interface which every observer is required to implement","Indicates when to call an observer.","Container for observers.","","","","","","","","","","The default for <code>ObserverMode</code> is <code>Always</code>","","","Write parameter vectors to a file during optimization.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if there are no observers stored.","","","Construct a new empty <code>Observers</code> instance.","Called once after initialization of the solver.","After initialization of the solver, this loops over all â€¦","Called at every iteration of the solver","Called after each iteration.","Add another observer with a corresponding <code>ObserverMode</code>.","","Loggers based on the <code>slog</code> crate","","","","","","","","","","","","","","","Use <code>bincode</code> for creating binary files","Use <code>serde_json</code> for creating JSON files","Write parameter vectors to a file during optimization.","Available serializers for <code>WriteToFile</code>.","","","","","","","","","Defaults to <code>Bincode</code>","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new instance of <code>WriteToFile</code>.","","","","","","","","","","","","","","","","A logger using the <code>slog</code> crate as backend.","","","","","Log JSON to a file while blocking execution in case of â€¦","Log JSON to a file without blocking execution.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Log basic information about the optimization after â€¦","Logs information about the progress of the optimization â€¦","Log to the terminal.","Log to the terminal without blocking execution.","","","","","","","","Pseudo problem useful for testing","A (non-working) solver useful for testing","A struct representing the following sparse problem.","Returns a clone of parameter <code>p</code>.","Returns a clone of parameter <code>p</code>.","","","","","","","","","","","","","Returns <code>1.0f64</code>.","Returns a sum of squared errors.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns a clone of parameter <code>p</code>.","Returns a gradient of the cost function.","","","Returns <code>vec![p, p]</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>vec![p, p]</code>.","Create an instance of <code>TestProblem</code>.","Create an instance of <code>TestSparseProblem</code>.","Create an instance of <code>TestSolver</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Brentâ€™s methods","Conjugate Gradient methods","Newton Methods","Golden-section search","Gradient descent methods","Landweber iteration","Line search methods","Nelder-Mead method","Newton Methods","Particle Swarm Optimization (PSO)","Quasi-Newton methods","Simulated Annealing","Trust region method","Brentâ€™s method","Brentâ€™s method","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Constructor","Constructor The values <code>min</code> and <code>max</code> must bracketing the â€¦","","","","","Set the tolerance to the value required.","","","","","","","","","","","","","","","Conjugate Gradient method","Non-linear Conjugate Gradient method","Beta update methods for <code>NonlinearConjugateGradient</code>","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Return the previous search direction (Needed by <code>NewtonCG</code>)","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Constructs an instance of <code>ConjugateGradient</code>","Construct a new instance of <code>NonlinearConjugateGradient</code>.","Perform one iteration of CG algorithm","","Specify the number of iterations after which a restart â€¦","Set the value for the orthogonality measure.","","","","","","","","","","","","","","","","","Fletcher and Reeves (FR) method","Hestenes and Stiefel (HS) method","Interface for beta update methods (â€¦","Polak and Ribiere (PR) method","Polak and Ribiere Plus (PR+) method","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Construct a new instance of <code>FletcherReeves</code>.","Construct a new instance of <code>PolakRibiere</code>.","Construct a new instance of <code>PolakRibierePlus</code>.","Construct a new instance of <code>HestenesStiefel</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update beta.","Update beta using the Fletcher-Reeves method.","Update beta using the Polak-Ribiere method.","Update beta using the Polak-Ribiere+ (PR+) method.","Update beta using the Hestenes-Stiefel method.","","","","","Gauss-Newton method","Gauss-Newton method with line search","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Construct a new instance of <code>GaussNewtonLS</code>.","Construct a new instance of <code>GaussNewton</code>.","","","","","","","","","","","","","","","","","","","","","Set step width gamma.","Set tolerance for the stopping criterion based on cost â€¦","Set tolerance for the stopping criterion based on cost â€¦","Golden-section search","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Construct a new instance of <code>GoldenSectionSearch</code>.","","","","","","","","","","","Set tolerance.","Steepest descent","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Construct a new instance of <code>SteepestDescent</code>","","","","","","","","","","Landweber iteration","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Construct a new instance of <code>Landweber</code>","","","","","","","","","","Backtracking line search","Hager-Zhang line search","Line search trait","More-Thuente line search","","","","","","","","","","","","","Acceptance conditions","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Set the initial step length","Set initial step length","Set initial alpha value","Set initial alpha value","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Construct a new instance of <code>BacktrackingLineSearch</code>","Construct a new instance of <code>HagerZhangLineSearch</code>","Construct a new instance of <code>MoreThuenteLineSearch</code>","","","","Set contraction factor rho","Set the search direction","Set search direction","Set search direction","Set search direction","","","","","","","","","","","","","","","","","","","","","","","","","","","Set lower and upper bound of step","Set lower and upper bound of step","Set the constants c1 and c2 for the sufficient decrease â€¦","Set delta and sigma.","Set epsilon","Set eta","Set gamma","Set theta","Set relative tolerance on width of uncertainty interval","Armijo Condition","Goldstein conditions","Interface which a condition needs to implement.","Strong Wolfe conditions","Wolfe conditions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate the condition","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Construct a new <code>ArmijoCondition</code> instance.","Construct a new instance of <code>GoldsteinCondition</code>.","Construct a new instance of <code>StrongWolfeCondition</code>.","Construct a new instance of <code>WolfeCondition</code>.","Indicates whether this condition requires the computation â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Nelder-Mead method","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Construct a new instance of <code>NelderMead</code>","","","","","","","","","","","Set alpha parameter for reflection","Set gamma for expansion","Set rho for contraction","Set sample standard deviation tolerance","Set sigma for shrinking","Newtonâ€™s method","Newton-Conjugate-Gradient (Newton-CG) method","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Construct a new instance of <code>NewtonCG</code>","Construct a new instance of <code>Newton</code>","","","","","","","","","","","","","","","","","","","","Set curvature threshold","Set step size gamma","Set tolerance for the stopping criterion based on cost â€¦","A single particle","Particle Swarm Optimization (PSO)","","","","","","","","","Cost of particle","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Construct a new instance of <code>ParticleSwarm</code>","Create a new particle with a given position, cost and â€¦","Perform one iteration of algorithm","Position of particle","","","","","","","","","","","","","","","","","Set cognitive acceleration factor","Set inertia factor on particle velocity","Set social acceleration factor","BFGS method","Davidon-Fletcher-Powell (DFP) method","Limited-memory BFGS (L-BFGS) method","Symmetric rank-one (SR1) method","SR1 Trust region method","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Construct a new instance of <code>BFGS</code>","Construct a new instance of <code>DFP</code>","Construct a new instance of <code>LBFGS</code>","Construct a new instance of <code>SR1</code>","Construct a new instance of <code>SR1TrustRegion</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set denominator factor","Set denominator factor","Set eta","Activates L1-regularization with coefficient <code>l1_coeff</code>.","Set initial radius","Sets tolerance for the stopping criterion based on the â€¦","Sets tolerance for the stopping criterion based on the â€¦","Sets tolerance for the stopping criterion based on the â€¦","The algorithm stops if the norm of the gradient is below â€¦","The algorithm stops if the norm of the gradient is below â€¦","The algorithm stops if the norm of the gradient is below â€¦","The algorithm stops if the norm of the gradient is below â€¦","The algorithm stops if the norm of the gradient is below â€¦","This trait handles the annealing of a parameter vector. â€¦","<code>t_i = t_init / ln(i)</code>","<code>t_i = t_init * x^i</code>","Precision of floats","Return type of the anneal function","Type of the parameter vector","Temperature functions for Simulated Annealing.","Simulated Annealing","<code>t_i = t_init / i</code>","Anneal a parameter vector","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Construct a new instance of <code>SimulatedAnnealing</code>","Construct a new instance of <code>SimulatedAnnealing</code>","Perform one iteration of SA algorithm","","","","","","","","","","","","","","","","","","Set the number of iterations that need to pass after the â€¦","Set the number of iterations that need to pass after the â€¦","Set number of iterations after which reannealing is â€¦","If there are no accepted solutions for <code>iter</code> iterations, â€¦","If there are no new best solutions for <code>iter</code> iterations, â€¦","Set temperature function","Cauchy point method","Dogleg method","Steihaug method","Trust region method","An interface methods which calculate approximate steps for â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Construct a new instance of <code>CauchyPoint</code>","Construct a new instance of <code>Dogleg</code>","Construct a new instance of <code>Steihaug</code>","Construct a new instance of <code>TrustRegion</code>","","","","","","","Computes reduction ratio","","","","","Set the initial radius","Set current radius.","Set current radius.","Set current radius.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set epsilon","Set eta","Set maximum number of iterations","Set maximum radius","Set radius"],"i":[0,0,0,0,0,0,0,0,5,5,4,0,0,29,54,54,0,0,0,0,29,5,8,0,21,0,22,54,29,54,0,0,23,0,37,0,0,0,0,37,11,0,54,54,36,0,0,14,20,14,20,21,22,23,5,8,0,54,0,0,0,0,37,37,0,29,0,37,36,0,0,0,29,6,4,14,4,2,2,5,5,4,2,33,34,35,35,33,34,6,2,54,29,30,4,32,33,34,35,36,37,6,2,54,29,30,4,32,33,34,35,36,37,14,14,4,20,20,4,21,21,4,22,22,4,23,23,4,4,5,5,4,2,0,6,29,30,4,32,33,34,35,36,37,29,30,4,32,33,34,35,36,37,32,6,4,4,2,20,4,33,34,35,33,34,35,4,33,34,35,6,30,4,33,35,36,37,2,2,33,34,35,36,37,2,2,2,2,29,30,32,33,35,36,37,30,2,2,54,54,29,29,30,30,4,32,33,34,35,36,36,37,37,6,2,2,2,54,29,29,29,29,29,29,29,29,29,29,30,4,32,33,34,35,36,37,30,6,2,54,29,30,4,32,33,34,35,36,37,8,33,34,35,30,8,33,33,34,35,35,8,33,34,35,29,8,33,33,34,35,35,29,8,33,34,35,33,33,29,33,8,33,34,35,33,8,33,34,35,8,33,34,35,8,33,34,35,35,33,35,35,33,33,35,33,33,35,33,33,33,4,29,8,33,33,34,35,35,8,33,34,35,8,33,34,35,8,33,34,35,29,33,21,4,33,36,37,22,4,33,33,8,33,34,35,35,35,11,11,30,6,2,54,29,30,4,32,33,34,35,36,37,33,33,2,8,33,34,35,6,2,54,29,30,4,32,33,34,35,36,37,33,34,35,23,4,33,33,30,29,30,33,34,35,0,33,34,35,33,34,35,30,2,8,6,2,30,4,32,33,34,35,11,0,14,14,20,20,21,21,22,22,23,23,33,34,33,34,32,35,35,33,34,35,35,33,34,33,34,35,33,33,35,33,33,33,34,4,32,4,32,4,2,6,30,33,34,35,36,37,32,32,32,32,35,33,33,33,35,33,33,33,35,35,33,33,33,35,33,33,33,4,33,34,35,33,34,35,11,11,11,11,8,33,34,35,8,8,36,33,34,35,0,37,8,33,34,35,33,34,35,6,29,30,4,32,33,34,35,36,37,2,54,29,30,32,36,37,6,2,54,29,30,4,32,33,34,35,36,37,6,2,54,29,30,4,32,33,34,35,36,37,6,2,54,29,30,4,32,33,34,35,36,37,6,2,54,29,30,4,32,33,34,35,36,37,6,2,54,29,30,4,32,33,34,35,36,37,8,33,34,35,6,2,54,29,30,4,32,33,34,35,36,37,132,133,134,135,136,137,138,74,0,0,74,0,74,73,74,73,74,73,74,73,74,73,74,73,73,74,73,73,74,74,28,73,73,73,74,73,74,73,74,73,74,73,74,28,73,73,28,73,28,73,74,74,73,74,73,74,73,74,73,74,73,74,73,74,7,7,7,7,0,0,0,76,7,76,7,76,7,76,7,76,7,7,7,0,7,76,7,76,7,76,7,76,76,7,76,12,76,12,76,76,7,0,76,7,76,7,76,7,76,7,76,7,76,7,76,7,78,78,0,0,77,78,77,78,77,78,77,78,78,77,78,77,78,77,78,77,78,77,78,77,78,77,77,77,78,77,78,77,78,77,78,77,78,77,78,77,78,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,0,0,80,80,80,81,82,80,81,82,80,81,82,80,81,82,80,81,80,81,82,80,81,82,80,81,82,80,81,82,80,81,82,80,81,82,80,81,80,81,80,80,81,82,80,81,82,80,80,81,82,82,80,81,82,80,81,82,80,81,82,80,81,82,80,81,82,80,81,82,80,81,82,80,81,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,83,84,83,84,83,84,83,84,83,84,83,84,83,84,0,0,0,85,86,85,86,85,86,85,86,85,86,85,86,85,86,85,85,86,85,86,85,86,85,86,85,86,86,86,85,86,85,86,85,86,85,86,85,86,85,86,85,86,85,86,0,0,0,0,0,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,92,93,94,95,91,92,93,94,95,92,93,94,95,0,0,97,98,97,98,97,98,97,98,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,98,97,98,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,0,0,0,0,102,103,104,102,103,104,102,103,104,102,103,104,0,103,104,102,103,104,102,102,102,103,104,102,103,104,102,103,104,90,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,102,90,102,103,104,102,103,104,102,103,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,103,104,104,103,103,103,103,103,104,0,0,0,0,0,106,107,108,109,106,107,108,109,106,107,108,109,106,107,108,109,106,107,108,109,106,107,108,109,106,107,108,109,105,106,107,108,109,106,107,108,109,106,107,108,109,106,107,108,109,106,107,108,109,106,107,108,109,106,107,108,109,105,106,107,108,109,106,107,108,109,106,107,108,109,106,107,108,109,106,107,108,109,106,107,108,109,106,107,108,109,106,107,108,109,106,107,108,109,0,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,0,0,111,112,111,112,111,112,111,112,112,111,112,111,112,111,112,111,112,111,112,111,112,111,112,111,112,111,111,112,111,112,111,112,111,112,111,112,111,112,111,112,111,112,111,0,0,113,114,113,114,113,114,113,114,114,113,114,114,114,113,114,113,114,113,113,114,113,114,113,114,113,114,113,114,113,114,113,114,113,114,113,114,113,114,113,114,113,114,113,113,113,0,0,0,0,0,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,115,116,117,118,119,118,119,119,117,119,115,117,118,115,116,117,118,119,0,123,123,13,13,13,0,0,123,13,123,124,123,124,123,124,123,124,123,123,124,123,123,123,124,123,124,124,123,124,123,124,124,124,124,123,124,124,123,124,123,124,123,124,123,124,123,124,123,124,123,124,124,124,124,124,124,124,0,0,0,0,0,127,128,129,130,127,128,129,130,127,128,129,130,127,128,129,130,127,128,129,127,128,129,130,127,128,127,128,127,128,129,130,127,128,129,130,129,130,127,128,129,130,127,128,129,130,127,128,129,130,127,128,129,130,127,128,0,127,128,129,130,122,127,128,129,127,128,129,130,127,128,129,130,127,128,129,130,127,128,129,130,127,128,129,130,127,128,129,130,127,128,129,130,127,128,129,130,129,130,129,130,130],"f":[0,0,0,0,0,0,0,0,[-1,[[3,[[1,[1]],2]]],[]],[-1,[[3,[[1,[1]],2]]],[]],[[[4,[-1]]],[[3,[[1,[1]],2]]],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[6,[-1,-3,-2]],-4,7],[[6,[-1,-3,-2]]],[],[8,9,10],[[11,[-1,-2]]],[[12,[-2]]]],[[[4,[-1]]],[[3,[2]]],13],[-1,[[3,[2]]],[]],[[[4,[-1]]],[[3,[2]]],14],[2,15],[2,15],[-1,[[3,[1,2]]],[]],[-1,[[3,[1,2]]],[]],[[[4,[-1]]],[[3,[1,2]]],5],[2,16],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[17,[-2]]],[[3,[1,2]]],18,[19,18]],[[-1,[17,[-2]]],[[3,[1,2]]],18,[19,18]],[[[4,[-1]],[17,[-2]]],[[3,[1,2]]],[18,14],[19,18]],[[-1,[17,[-2]]],[[3,[1,2]]],18,[19,18]],[[-1,[17,[-2]]],[[3,[1,2]]],18,[19,18]],[[[4,[-1]],[17,[-2]]],[[3,[1,2]]],[18,20],[19,18]],[[-1,[17,[-2]]],[[3,[1,2]]],18,[19,18]],[[-1,[17,[-2]]],[[3,[1,2]]],18,[19,18]],[[[4,[-1]],[17,[-2]]],[[3,[1,2]]],[18,21],[19,18]],[[-1,[17,[-2]]],[[3,[1,2]]],18,[19,18]],[[-1,[17,[-2]]],[[3,[1,2]]],18,[19,18]],[[[4,[-1]],[17,[-2]]],[[3,[1,2]]],[18,22],[19,18]],[[-1,[17,[-2]]],[[3,[1,2]]],18,[19,18]],[[-1,[17,[-2]]],[[3,[1,2]]],18,[19,18]],[[[4,[-1]],[17,[-2]]],[[3,[1,2]]],[18,23],[19,18]],[[[4,[-1]],24,25,-2],[[3,[-3,2]]],[],26,[]],[-1,[[3,[1,2]]],[]],[-1,[[3,[1,2]]],[]],[[[4,[-1]]],[[3,[1,2]]],5],[2,27],0,[[[6,[-1,-3,-2]],-4],[[6,[-1,-3,-2]]],[],[8,9,10],[[11,[-1,-2]]],[[28,[-3,-2]]]],[29,29],[30,30],[[[4,[-1]]],[[4,[-1]]],31],[[[32,[-1,-2,-3]]],[[32,[-1,-2,-3]]],31,31,31],[[[33,[-1,-2,-3,-4,-5]]],[[33,[-1,-2,-3,-4,-5]]],31,31,31,31,31],[[[34,[-1,-2]]],[[34,[-1,-2]]],31,31],[[[35,[-1,-2]]],[[35,[-1,-2]]],31,31],[36,36],[37,37],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[[32,[-1,-2,-3]],[32,[-1,-2,-3]]],39,[],[],8],[[[6,[-1,-3,-2]],-4],[[6,[-1,-3,-2]]],[],[8,9,10],[[11,[-1,-2]]],26],[[[4,[-1]],[4,[-2]]],38,[],[]],[[[4,[-1]],[4,[-1]]],38,[]],[[2,-1],2,[40,41,42]],[-1,[[3,[2]]],[]],[[[4,[-1]]],[[3,[2]]],20],[[[33,[-1,-2,-3,-4,-5]],-5],[[33,[-1,-2,-3,-4,-5]]],[],[],[],[],43],[[[34,[-1,-2]],-2],[[34,[-1,-2]]],[],[]],[[[35,[-1,-2]],-2],[[35,[-1,-2]]],[],43],0,0,0,0,0,0,0,[[[6,[-1,-3,-2]],44],[[6,[-1,-3,-2]]],[],[8,9,10],[[11,[-1,-2]]]],[[],30],[[],[[4,[-1]]],45],[[],[[33,[-1,-2,-3,-4,-5]]],45,45,45,45,45],[[],[[35,[-1,-2]]],45,45],[[],36],[[],37],[2],[2],[-1,[[3,[[33,[-2,-3,-4,-5,-6]]]]],46,47,47,47,47,47],[-1,[[3,[[34,[-2,-3]]]]],46,47,47],[-1,[[3,[[35,[-2,-3]]]]],46,47,47],[-1,[[3,[36]]],46],[-1,[[3,[37]]],46],[2,[[3,[-1,2]]],[40,48,41,42]],[2,[[49,[-1]]],[40,48,41,42]],[2,[[49,[-1]]],[40,48,41,42]],[2,38],[[29,29],44],[[30,30],44],[[[32,[-1,-2,-3]],[32,[-1,-2,-3]]],44,[],[],8],[[[33,[-1,-2,-3,-4,-5]],[33,[-1,-2,-3,-4,-5]]],44,50,50,50,50,50],[[[35,[-1,-2]],[35,[-1,-2]]],44,50,50],[[36,36],44],[[37,37],44],[[30,-1],38,51],[[2,52],[[3,[38,53]]]],[[2,52],[[3,[38,53]]]],[[54,52],55],[[54,52],55],[[29,52],55],[[29,52],55],[[30,52],55],[[30,52],55],[[[4,[-1]],52],55,48],[[[32,[-1,-3,-2]],52],55,[],8,[[11,[-1,-2]]]],[[[33,[-1,-2,-3,-4,-5]],52],55,48,48,48,48,48],[[[34,[-1,-2]],52],55,48,48],[[[35,[-1,-2]],52],55,48,48],[[36,52],55],[[36,52],55],[[37,52],55],[[37,52],55],[-1,-1,[]],[-1,-1,[]],[56,-1,[]],[-1,2,[15,41,42]],[-1,-1,[]],[57,29],[-1,-1,[]],[58,29],[59,29],[60,29],[61,29],[44,29],[24,29],[62,29],[63,29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,30,51],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[4,[-2]]],38,[],[]],[[[33,[-1,-2,-3,-4,-5]],[4,[-6]]],38,31,[],[],[],43,[]],[[[34,[-1,-2]],[4,[-3]]],38,31,43,[]],[[[35,[-1,-2]],[4,[-3]]],38,31,43,[]],[[30,24],[[49,[29]]]],[-1,[],[]],[[[33,[-1,-2,-3,-4,-5]]],[],31,[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],-5,[],[],[],[],43],[[[34,[-1,-2]]],[],31,43],[[[35,[-1,-2]]],-2,[],43],[[[35,[-1,-2]]],[],31,43],[-1,49,[]],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-1]]],31,[],[],[],43],[[[34,[-1,-2]]],[[49,[-1]]],31,43],[[[35,[-1,-2]]],[[49,[-1]]],31,43],[29,[[49,[44]]]],[-1,[],[]],[[[33,[-1,-2,-3,-4,-5]]],-5,[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],[],31,[],[],[],43],[[[34,[-1,-2]]],[],31,43],[[[35,[-1,-2]]],-2,[],43],[[[35,[-1,-2]]],[],31,43],[29,[[49,[62]]]],[-1,[[64,[59,63]]],[]],[[[33,[-1,-2,-3,-4,-5]]],[[64,[59,63]]],31,[],[],[],43],[[[34,[-1,-2]]],[[64,[59,63]]],31,43],[[[35,[-1,-2]]],[[64,[59,63]]],31,43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-2]]],[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-4]]],[],[],[],[],43],[29,[[49,[60]]]],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-4]]],[],[],[],[],43],[-1,63,[]],[[[33,[-1,-2,-3,-4,-5]]],63,31,[],[],[],43],[[[34,[-1,-2]]],63,31,43],[[[35,[-1,-2]]],63,31,43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-3]]],[],[],[],[],43],[-1,63,[]],[[[33,[-1,-2,-3,-4,-5]]],63,31,[],[],[],43],[[[34,[-1,-2]]],63,31,43],[[[35,[-1,-2]]],63,31,43],[-1,63,[]],[[[33,[-1,-2,-3,-4,-5]]],63,31,[],[],[],43],[[[34,[-1,-2]]],63,31,43],[[[35,[-1,-2]]],63,31,43],[-1,49,[]],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-1]]],31,[],[],[],43],[[[34,[-1,-2]]],[[49,[-1]]],31,43],[[[35,[-1,-2]]],[[49,[-1]]],31,43],[[[35,[-1,-2]]],[[49,[[1,[-1]]]]],[],43],[[[33,[-1,-2,-3,-4,-5]]],-5,[],[],[],[],43],[[[35,[-1,-2]]],-2,[],43],[[[35,[-1,-2]]],[[49,[-1]]],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-1]]],[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],-5,[],[],[],[],43],[[[35,[-1,-2]]],-2,[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-2]]],[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-4]]],[],[],[],[],43],[[[35,[-1,-2]]],[[49,[-1]]],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-4]]],[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-3]]],[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-1]]],[],[],[],[],43],[[[4,[-1]]],[[49,[-1]]],[]],[29,[[49,[59]]]],[-1,[],[]],[[[33,[-1,-2,-3,-4,-5]]],-5,[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],[],31,[],[],[],43],[[[34,[-1,-2]]],[],31,43],[[[35,[-1,-2]]],[],31,43],[[[35,[-1,-2]]],-2,[],43],[-1,[[49,[37]]],[]],[[[33,[-1,-2,-3,-4,-5]]],[[49,[37]]],31,[],[],[],43],[[[34,[-1,-2]]],[[49,[37]]],31,43],[[[35,[-1,-2]]],[[49,[37]]],31,43],[-1,36,[]],[[[33,[-1,-2,-3,-4,-5]]],36,31,[],[],[],43],[[[34,[-1,-2]]],36,31,43],[[[35,[-1,-2]]],36,31,43],[-1,[[49,[65]]],[]],[[[33,[-1,-2,-3,-4,-5]]],[[49,[65]]],31,[],[],[],43],[[[34,[-1,-2]]],[[49,[65]]],31,43],[[[35,[-1,-2]]],[[49,[65]]],31,43],[29,[[49,[63]]]],0,[-1,[[3,[2]]],[]],[[[4,[-1]]],[[3,[2]]],21],[[[33,[-1,-2,-3,-4,-5]],-2],[[33,[-1,-2,-3,-4,-5]]],[],[],[],[],43],[[36,-1],38,66],[[37,-1],38,66],[-1,[[3,[2]]],[]],[[[4,[-1]]],[[3,[2]]],22],[[[33,[-1,-2,-3,-4,-5]],-4],[[33,[-1,-2,-3,-4,-5]]],[],[],[],[],43],0,[-1,38,[]],[[[33,[-1,-2,-3,-4,-5]]],38,31,[],[],[],43],[[[34,[-1,-2]]],38,31,43],[[[35,[-1,-2]]],38,31,43],[[[35,[-1,-2]],-1],[[35,[-1,-2]]],[],43],0,[[-1,[4,[-2]],-3],[[3,[[38,[-3,[49,[30]]]],2]]],[],[],[]],[[-1,[4,[-2]],-3],[[3,[[38,[-3,[49,[30]]]],2]]],[],[],[]],[[30,24,29],30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1,-2,-3,-4,-5]],-4],[[33,[-1,-2,-3,-4,-5]]],[],[],[],[],43],0,[2,44],[-1,44,[]],[[[33,[-1,-2,-3,-4,-5]]],44,31,[],[],[],43],[[[34,[-1,-2]]],44,31,43],[[[35,[-1,-2]]],44,31,43],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],0,0,0,[-1,[[3,[2]]],[]],[[[4,[-1]]],[[3,[2]]],23],[[[33,[-1,-2,-3,-4,-5]],-3],[[33,[-1,-2,-3,-4,-5]]],[],[],[],[],43],0,[30,[[1,[[38,[24,24]]]]]],[29,24],0,0,0,0,0,[[[33,[-1,-2,-3,-4,-5]],63],[[33,[-1,-2,-3,-4,-5]]],[],[],[],[],43],[[[34,[-1,-2]],63],[[34,[-1,-2]]],[],[]],[[[35,[-1,-2]],63],[[35,[-1,-2]]],[],43],0,0,0,[[30,30],30],[-1,2,[40,48,41,42]],[[],-1,[]],[[-1,-3],[[6,[-1,-3,-2]]],[],[8,9,10],[[11,[-1,-2]]]],[-1,2,[15,41,42]],[[],30],[-1,[[4,[-1]]],[]],[[[4,[-1]],-2,-3],[[32,[-1,-2,-3]]],[],[],[]],[[],[[33,[-1,-2,-3,-4,-5]]],31,[],[],[],43],[[],[[34,[-1,-2]]],31,43],[[],[[35,[-1,-2]]],31,43],[[-1,[4,[-2]],-3],[[3,[[38,[-3,[49,[30]]]],2]]],[],[],[]],0,[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[[[33,[-1,-2,-3,-4,-5]],-1],[[33,[-1,-2,-3,-4,-5]]],[],[],[],[],43],[[[34,[-1,-2]],-1],[[34,[-1,-2]]],[],[]],0,0,[[[32,[-1,-2,-3]],[32,[-1,-2,-3]]],[[49,[39]]],[],[],8],[[[35,[-1,-2]],[1,[-1]]],[[35,[-1,-2]]],[],43],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[4,[-1]],24,-2],[[3,[-3,2]]],[],26,[]],[[[32,[-1,-2,-3]]],[[4,[-1]]],[],[],[]],0,0,[[[4,[-1]]],38,[]],[2,15],[[[6,[-1,-3,-2]]],[[3,[[32,[-1,-3,-2]],2]]],[],[8,9,10],[[11,[-1,-2]]]],[[30,67,68],69],[[[33,[-1,-2,-3,-4,-5]],-6],3,70,70,70,70,70,71],[[[34,[-1,-2]],-3],3,70,70,71],[[[35,[-1,-2]],-3],3,70,70,71],[[36,-1],3,71],[[37,-1],3,71],[[[32,[-1,-2,-3]]],-2,[],[],[]],0,[[[32,[-1,-2,-3]]],-3,[],[],[]],0,[[[35,[-1,-2]]],[[49,[-1]]],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-1]]],[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-2]]],[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-4]]],[],[],[],[],43],[[[35,[-1,-2]]],[[49,[-1]]],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-4]]],[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-3]]],[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-1]]],[],[],[],[],43],[[[35,[-1,-2]]],[[49,[[1,[-1]]]]],[],43],[[[35,[-1,-2]]],[[49,[-1]]],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-1]]],[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-2]]],[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-4]]],[],[],[],[],43],[[[35,[-1,-2]]],[[49,[-1]]],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-4]]],[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-3]]],[],[],[],[],43],[[[33,[-1,-2,-3,-4,-5]]],[[49,[-1]]],[],[],[],[],43],[[[4,[-1]]],[[49,[-1]]],[]],[[[33,[-1,-2,-3,-4,-5]],-5],[[33,[-1,-2,-3,-4,-5]]],[],[],[],[],43],[[[34,[-1,-2]],-2],[[34,[-1,-2]]],[],[]],[[[35,[-1,-2]],-2],[[35,[-1,-2]]],[],43],0,0,0,[[-1,-2],36,[],[]],[[-1,-2],36,[],[]],[[-1,-2],36,[],[]],[[-1,-2],36,[],[]],[[-1,37],-1,[]],[[[33,[-1,-2,-3,-4,-5]],37],[[33,[-1,-2,-3,-4,-5]]],31,[],[],[],43],[[[34,[-1,-2]],37],[[34,[-1,-2]]],31,43],[[[35,[-1,-2]],37],[[35,[-1,-2]]],31,43],[-1,44,[]],[-1,44,[]],[36,44],0,0,0,0,[37,24],[[-1,[49,[65]]],-1,[]],[[[33,[-1,-2,-3,-4,-5]],[49,[65]]],[[33,[-1,-2,-3,-4,-5]]],31,[],[],[],43],[[[34,[-1,-2]],[49,[65]]],[[34,[-1,-2]]],31,43],[[[35,[-1,-2]],[49,[65]]],[[35,[-1,-2]]],31,43],0,0,0,[[[6,[-1,-3,-2]],44],[[6,[-1,-3,-2]]],[],[8,9,10],[[11,[-1,-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,38,[]],[[[33,[-1,-2,-3,-4,-5]]],38,31,[],[],[],43],[[[34,[-1,-2]]],38,31,43],[[[35,[-1,-2]]],38,31,43],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[73,73],[74,74],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[],73],[[],74],0,[[73,73],44],[[74,74],44],0,[[73,52],55],[[74,52],55],[[74,52],55],[-1,74,[]],[73,74],0,[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[73,-1],38,66],[[74,-1],38,66],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[-1,[[3,[[49,[[38,[-2,-3]]]],2]]],[],[],[]],[73,[[3,[[49,[[38,[-1,-2]]]],2]]],[9,10],[9,10]],[[-1,-1,74],73,[[75,[24]]]],[[-1,-2,-3],[[3,[38,2]]],[],[],[]],[[73,-1,-2],[[3,[38,2]]],[9,10],[9,10]],[[-1,-2,-3,63],[[3,[38,2]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,59,[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[76,[-1]]],[[76,[-1]]],31],[7,7],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[],[[76,[-1]]],45],[[],7],[-1,[[3,[7]]],46],[[7,7],44],0,[[7,52],55],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[76,[-1]]],44,[]],[-1,44,[]],[-1,44,[]],[[],[[76,[-1]]],[]],[[-1,24,30],[[3,[38,2]]],[]],[[[76,[-1]],24,30],[[3,[38,2]]],8],[[-1,-2,30],[[3,[38,2]]],[],[]],[[[76,[-1]],-1,30],[[3,[38,2]]],8],[[[76,[-1]],-2,7],[[76,[-1]]],[],[[12,[-1]]]],[[7,-1],3,71],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[77,77],[78,78],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[],78],[[77,77],44],[[78,78],44],[[77,52],55],[[78,52],55],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[[-1,-1,78],77,[[75,[24]]]],[[77,-1,30],[[3,[38,2]]],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[79,79],[[-1,-2],38,[],[]],[[-1,44],[[3,[79,2]]],[[75,[24]]]],[[-1,44],[[3,[79,2]]],[[75,[24]]]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[[79,24,30],[[3,[38,2]]]],[[79,-1,30],[[3,[38,2]]],8],[[],79],[[],79],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,-2,[],[]],0,0,0,[80,[[3,[2]]]],[80,[[3,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[80,80],[81,81],[82,82],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[80,[[3,[2]]]],[81,[[3,[2]]]],[[],80],[[],81],[[],82],[-1,[[3,[80]]],46],[-1,[[3,[81]]],46],[-1,[[3,[82]]],46],[[80,80],44],[[81,81],44],[[82,82],44],[[80,52],55],[[81,52],55],[[82,52],55],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[80,[[3,[2]]]],[81,[[3,[2]]]],[[80,-1],38,66],[[81,-1],38,66],[80,[[3,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[80,[[3,[2]]]],[[],80],[[],81],[[],82],[[82,[4,[-1]],[33,[[1,[62]],38,38,38,62]]],[[3,[[38,[[33,[[1,[62]],38,38,38,62]],[49,[30]]]],2]]],[]],[[80,-1],3,71],[[81,-1],3,71],[[82,-1],3,71],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[83,[-1]]],[[83,[-1]]],31],[[[84,[-1]]],[[84,[-1]]],31],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[-1,[[3,[[83,[-2]]]]],46,47],[-1,[[3,[[84,[-2]]]]],46,47],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[83,[-1]],[4,[-2]],[33,[-1,38,38,38,-1]]],[[3,[[38,[[33,[-1,38,38,38,-1]],[49,[30]]]],2]]],43,20],[[[84,[-1]],[4,[-2]],[33,[-1,38,38,38,-1]]],[[3,[[38,[[33,[-1,38,38,38,-1]],[49,[30]]]],2]]],43,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[[-1,-1],[[83,[-1]]],43],[[-1,-1,-1],[[84,[-1]]],43],[[[83,[-1]],[4,[-2]],[33,[-1,38,38,38,-1]]],[[3,[[38,[[33,[-1,38,38,38,-1]],[49,[30]]]],2]]],43,20],[[[84,[-1]],[4,[-2]],[33,[-1,38,38,38,-1]]],[[3,[[38,[[33,[-1,38,38,38,-1]],[49,[30]]]],2]]],43,20],[[[83,[-1]],-2],3,70,71],[[[84,[-1]],-2],3,70,71],[[[83,[-1]],-1,-1],[[83,[-1]]],43],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[85,[-1,-2]]],[[85,[-1,-2]]],31,31],[[[86,[-1,-2,-3,-4]]],[[86,[-1,-2,-3,-4]]],31,31,31,31],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[-1,[[3,[[85,[-2,-3]]]]],46,47,47],[-1,[[3,[[86,[-2,-3,-4,-5]]]]],46,47,47,47,47],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[85,[-1,-2]]],[[3,[-1,2]]],[],43],[[[85,[-1,-2]],[4,[-3]],[33,[-1,38,38,38,-2]]],[[3,[[38,[[33,[-1,38,38,38,-2]],[49,[30]]]],2]]],[],[],14],[[[86,[-1,-5,-6,-2]],[4,[-3]],[33,[-1,-4,38,38,-2]]],[[3,[[38,[[33,[-1,-4,38,38,-2]],[49,[30]]]],2]]],[],[],[20,21],[31,9,10,87,88,89],[31,[90,[-1,-2]],[11,[-3,[33,[-1,-4,38,38,-2]]]]],[[91,[-4,-1,-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[-1,[[85,[-1,-2]]],[],43],[[-1,-2],[[86,[-3,-1,-2,-4]]],[],[],[],43],[[[85,[-1,-2]],[4,[-3]],[33,[-1,38,38,38,-2]]],[[3,[[38,[[33,[-1,38,38,38,-2]],[49,[30]]]],2]]],[],[],14],[[[86,[-1,-5,-6,-2]],[4,[-3]],[33,[-1,-4,38,38,-2]]],[[3,[[38,[[33,[-1,-4,38,38,-2]],[49,[30]]]],2]]],[],[],[20,21],[31,9,10,87,88,89],[31,[90,[-1,-2]],[11,[-3,[33,[-1,-4,38,38,-2]]]]],[[91,[-4,-1,-2]]]],[[[86,[-1,-2,-3,-4]],63],[[86,[-1,-2,-3,-4]]],[],[],[],43],[[[86,[-1,-2,-3,-4]],-4],[[86,[-1,-2,-3,-4]]],[],[],[],43],[[[85,[-1,-2]],-3],3,70,70,71],[[[86,[-1,-2,-3,-4]],-5],3,70,70,70,70,71],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[92,92],[93,93],[94,94],[95,95],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[],92],[[],93],[[],94],[[],95],[-1,[[3,[92]]],46],[-1,[[3,[93]]],46],[-1,[[3,[94]]],46],[-1,[[3,[95]]],46],[[92,52],55],[[93,52],55],[[94,52],55],[[95,52],55],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[[],92],[[],93],[[],94],[[],95],[[92,-1],3,71],[[93,-1],3,71],[[94,-1],3,71],[[95,-1],3,71],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[[-1,-2,-2,-3],-4,[],[],[],[]],[[92,-1,-1,-3],-2,88,43,[]],[[93,-1,-1,-3],-2,[88,96,89],43,[]],[[94,-1,-1,-3],-2,[88,96,89],43,[]],[[95,-1,-1,-3],-2,[88,88,96],43,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[97,[-1,-2]]],[[97,[-1,-2]]],31,31],[[[98,[-1]]],[[98,[-1]]],31],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[],[[98,[-1]]],43],[-1,[[3,[[97,[-2,-3]]]]],46,47,47],[-1,[[3,[[98,[-2]]]]],46,47],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[-1,[[97,[-1,-2]]],[],43],[[],[[98,[-1]]],43],[[[97,[-5,-1]],[4,[-3]],[33,[-2,-4,-6,38,-1]]],[[3,[[38,[[33,[-2,-4,-6,38,-1]],[49,[30]]]],2]]],43,[],[14,23],[31,9,10],[31,[90,[-2,-1]],[11,[[0,[-3,-1]],[33,[-2,-4,38,38,-1]]]]],[],[]],[[[98,[-1]],[4,[-2]],[33,[-3,38,-4,38,-1]]],[[3,[[38,[[33,[-3,38,-4,38,-1]],[49,[30]]]],2]]],43,[14,23],[],[],[]],[[[97,[-1,-2]],-3],3,70,70,71],[[[98,[-1]],-2],3,70,71],[[[97,[-5,-1]],[33,[-2,-4,-6,38,-1]]],36,43,[],[14,23],[31,9,10],[31,[90,[-2,-1]],[11,[[0,[-3,-1]],[33,[-2,-4,38,38,-1]]]]],[],[]],[[[98,[-1]],[33,[-2,38,-3,38,-1]]],36,43,[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[98,[-1]],-1],[[3,[[98,[-1]],2]]],43],[[[97,[-1,-2]],-2],[[3,[[97,[-1,-2]],2]]],[],43],[[[98,[-1]],-1],[[3,[[98,[-1]],2]]],43],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[99,[-1]]],[[99,[-1]]],31],[[-1,-2],38,[],[]],[-1,[[3,[[99,[-2]]]]],46,47],[-1,-1,[]],[-1,-2,[],[]],[[[99,[-1]],[4,[-2]],[33,[-1,38,38,38,-1]]],[[3,[[38,[[33,[-1,38,38,38,-1]],[49,[30]]]],2]]],43,20],[-1,-2,[],[]],[-1,44,[]],[[-1,-1],[[3,[[99,[-1]],2]]],43],[[[99,[-1]],[4,[-2]],[33,[-1,38,38,38,-1]]],[[3,[[38,[[33,[-1,38,38,38,-1]],[49,[30]]]],2]]],43,20],[[[99,[-1]],-2],3,70,71],[[[99,[-1]],[33,[-1,38,38,38,-1]]],36,43],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,-2,[],[]],[[[99,[-1]],-1],[[3,[[99,[-1]],2]]],43],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[100,[-1]]],[[100,[-1]]],31],[[-1,-2],38,[],[]],[-1,[[3,[[100,[-2]]]]],46,47],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,[[100,[-1]]],[]],[[[100,[-5]],[4,[-3]],[33,[-4,-2,38,38,-1]]],[[3,[[38,[[33,[-4,-2,38,38,-1]],[49,[30]]]],2]]],43,[],[20,21],[31,9,10],[31,[90,[-2,-1]],[11,[-3,[33,[-4,-2,38,38,-1]]]]]],[[[100,[-1]],-2],3,70,71],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[101,[-1]]],[[101,[-1]]],31],[[-1,-2],38,[],[]],[-1,[[3,[[101,[-2]]]]],46,47],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,[[101,[-1]]],[]],[[[101,[-1]],[4,[-2]],[33,[-4,-3,38,38,-1]]],[[3,[[38,[[33,[-4,-3,38,38,-1]],[49,[30]]]],2]]],43,21,[],[]],[[[101,[-1]],-2],3,70,71],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[102,[-1,-2,-3,-4]]],[[102,[-1,-2,-3,-4]]],31,31,31,31],[[[103,[-1,-2,-3]]],[[103,[-1,-2,-3]]],31,31,31],[[[104,[-1,-2,-3]]],[[104,[-1,-2,-3]]],31,31,31],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],0,[[],[[103,[-3,-1,-2]]],[],[],[]],[[],[[104,[-1,-2,-3]]],[],[],43],[-1,[[3,[[102,[-2,-3,-4,-5]]]]],46,47,47,47,47],[-1,[[3,[[103,[-2,-3,-4]]]]],46,47,47,47],[-1,[[3,[[104,[-2,-3,-4]]]]],46,47,47,47],[[[102,[-1,-2,-3,-4]],[102,[-1,-2,-3,-4]]],44,50,50,50,50],[[[102,[-1,-2,-3,-4]],52],55,48,48,48,48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[102,[-3,-1,-4,-2]],[4,[-5]],[33,[-3,-1,38,38,-2]]],[[3,[[38,[[33,[-3,-1,38,38,-2]],[49,[30]]]],2]]],[],[],[],[[105,[-1,-1,-2]],9],[20,21]],[[[103,[-3,-1,-2]],[4,[-4]],[33,[-3,-1,38,38,-2]]],[[3,[[38,[[33,[-3,-1,38,38,-2]],[49,[30]]]],2]]],[],[],[],[20,21]],[[[104,[-3,-1,-2]],[4,[-4]],[33,[-3,-1,38,38,-2]]],[[3,[[38,[[33,[-3,-1,38,38,-2]],[49,[30]]]],2]]],[],[],[],[20,21]],[[-1,-2],[[3,[38,2]]],[],[]],[[[102,[-1,-2,-3,-4]],-4],[[3,[38,2]]],[],[],[],43],[[[103,[-1,-2,-3]],-3],[[3,[38,2]]],[],[],[]],[[[104,[-1,-2,-3]],-3],[[3,[38,2]]],[],[],43],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,[[102,[-2,-3,-1,-4]]],[],[],[],43],[[],[[103,[-3,-1,-2]]],[],[],[]],[[],[[104,[-1,-2,-3]]],[],[],43],[[[102,[-3,-1,-4,-2]],[4,[-5]],[33,[-3,-1,38,38,-2]]],[[3,[[38,[[33,[-3,-1,38,38,-2]],[49,[30]]]],2]]],[],[],[],[[105,[-1,-1,-2]],9],[20,21]],[[[103,[-3,-1,-2]],[4,[-4]],[33,[-3,-1,38,38,-2]]],[[3,[[38,[[33,[-3,-1,38,38,-2]],[49,[30]]]],2]]],[],[],[],[20,21]],[[[104,[-3,-1,-2]],[4,[-4]],[33,[-3,-1,38,38,-2]]],[[3,[[38,[[33,[-3,-1,38,38,-2]],[49,[30]]]],2]]],[],[],[],[20,21]],[[[102,[-1,-2,-3,-4]],-4],[[3,[[102,[-1,-2,-3,-4]],2]]],[],[],[],43],[[-1,-2],38,[],[]],[[[102,[-1,-2,-3,-4]],-2],38,[],[],[],43],[[[103,[-1,-2,-3]],-2],38,[],[],[]],[[[104,[-1,-2,-3]],-2],38,[],[],43],[[[102,[-1,-2,-3,-4]],-5],3,70,70,70,70,71],[[[103,[-1,-2,-3]],-4],3,70,70,70,71],[[[104,[-1,-2,-3]],-4],3,70,70,70,71],[[[102,[-3,-1,-4,-2]],[33,[-3,-1,38,38,-2]]],36,[],[],[],[[105,[-1,-1,-2]],9]],[[[103,[-3,-1,-2]],[33,[-3,-1,38,38,-2]]],36,[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[103,[-3,-1,-2]],-2,-2],[[3,[[103,[-3,-1,-2]],2]]],[],[],[]],[[[104,[-1,-2,-3]],-3,-3],[[3,[[104,[-1,-2,-3]],2]]],[],[],43],[[[104,[-1,-2,-3]],-3,-3],[[3,[[104,[-1,-2,-3]],2]]],[],[],43],[[[103,[-3,-1,-2]],-2,-2],[[3,[[103,[-3,-1,-2]],2]]],[],[],[]],[[[103,[-3,-1,-2]],-2],[[3,[[103,[-3,-1,-2]],2]]],[],[],[]],[[[103,[-3,-1,-2]],-2],[[3,[[103,[-3,-1,-2]],2]]],[],[],[]],[[[103,[-3,-1,-2]],-2],[[3,[[103,[-3,-1,-2]],2]]],[],[],[]],[[[103,[-3,-1,-2]],-2],[[3,[[103,[-3,-1,-2]],2]]],[],[],[]],[[[104,[-1,-2,-3]],-3],[[3,[[104,[-1,-2,-3]],2]]],[],[],43],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[106,[-1]]],[[106,[-1]]],31],[[[107,[-1]]],[[107,[-1]]],31],[[[108,[-1]]],[[108,[-1]]],31],[[[109,[-1]]],[[109,[-1]]],31],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[],[[106,[-1]]],45],[[],[[107,[-1]]],45],[[],[[108,[-1]]],45],[[],[[109,[-1]]],45],[-1,[[3,[[106,[-2]]]]],46,47],[-1,[[3,[[107,[-2]]]]],46,47],[-1,[[3,[[108,[-2]]]]],46,47],[-1,[[3,[[109,[-2]]]]],46,47],[[[106,[-1]],[106,[-1]]],44,50],[[[107,[-1]],[107,[-1]]],44,50],[[[108,[-1]],[108,[-1]]],44,50],[[[109,[-1]],[109,[-1]]],44,50],[[-1,-2,[49,[-3]],-2,-3,-4,-2],44,[],[],[],[]],[[[106,[-1]],-1,[49,[-3]],-1,-3,-2,-1],44,43,[],[[88,[-2,-1]]]],[[[107,[-1]],-1,[49,[-3]],-1,-3,-2,-1],44,43,[],[[88,[-2,-1]]]],[[[108,[-1]],-1,[49,[-3]],-1,-3,-2,-1],44,43,[],[[88,[-2,-1]]]],[[[109,[-1]],-1,[49,[-3]],-1,-3,-2,-1],44,43,[],[[88,[-2,-1]]]],[[[106,[-1]],52],55,48],[[[107,[-1]],52],55,48],[[[108,[-1]],52],55,48],[[[109,[-1]],52],55,48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,[[3,[[106,[-1]],2]]],43],[-1,[[3,[[107,[-1]],2]]],43],[[-1,-1],[[3,[[108,[-1]],2]]],43],[[-1,-1],[[3,[[109,[-1]],2]]],43],[-1,44,[]],[[[106,[-1]]],44,43],[[[107,[-1]]],44,43],[[[108,[-1]]],44,43],[[[109,[-1]]],44,43],[[[106,[-1]],-2],3,70,71],[[[107,[-1]],-2],3,70,71],[[[108,[-1]],-2],3,70,71],[[[109,[-1]],-2],3,70,71],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[110,[-1,-2]]],[[110,[-1,-2]]],31,31],[[-1,-2],38,[],[]],[-1,[[3,[[110,[-2,-3]]]]],46,47,47],[-1,-1,[]],[-1,-2,[],[]],[[[110,[-1,-2]],[4,[-3]],[33,[-1,38,38,38,-2]]],[[3,[[38,[[33,[-1,38,38,38,-2]],[49,[30]]]],2]]],[],[],20],[-1,-2,[],[]],[-1,44,[]],[[[1,[-1]]],[[110,[-1,-2]]],[],[]],[[[110,[-1,-2]],[4,[-3]],[33,[-1,38,38,38,-2]]],[[3,[[38,[[33,[-1,38,38,38,-2]],[49,[30]]]],2]]],[],[],20],[[[110,[-1,-2]],-3],3,70,70,71],[[[110,[-1,-2]],[33,[-1,38,38,38,-2]]],36,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,-2,[],[]],[[[110,[-1,-2]],-2],[[3,[[110,[-1,-2]],2]]],[],[]],[[[110,[-1,-2]],-2],[[3,[[110,[-1,-2]],2]]],[],[]],[[[110,[-1,-2]],-2],[[3,[[110,[-1,-2]],2]]],[],[]],[[[110,[-1,-2]],-2],[[3,[[110,[-1,-2]],2]]],[],[]],[[[110,[-1,-2]],-2],[[3,[[110,[-1,-2]],2]]],[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[111,[-1,-2]]],[[111,[-1,-2]]],31,31],[[[112,[-1]]],[[112,[-1]]],31],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[],[[112,[-1]]],43],[-1,[[3,[[111,[-2,-3]]]]],46,47,47],[-1,[[3,[[112,[-2]]]]],46,47],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[-1,[[111,[-1,-2]]],[],43],[[],[[112,[-1]]],43],[[[111,[-5,-2]],[4,[-3]],[33,[-1,-4,38,-6,-2]]],[[3,[[38,[[33,[-1,-4,38,-6,-2]],[49,[30]]]],2]]],[],[],[21,22],[9,10,[89,[-2]],[87,[-2,-1]]],[31,[90,[-1,-2]],[11,[-3,[33,[-1,-4,38,38,-2]]]]],[31,9,10,[88,[-1,-1]]]],[[[112,[-1]],[4,[-2]],[33,[-3,-4,38,-5,-1]]],[[3,[[38,[[33,[-3,-4,38,-5,-1]],[49,[30]]]],2]]],43,[21,22],[],[],[]],[[[111,[-1,-2]],-3],3,70,70,71],[[[112,[-1]],-2],3,70,71],[[[111,[-5,-2]],[33,[-1,-4,38,-6,-2]]],36,[],[],[21,22],[9,10,[89,[-2]],[87,[-2,-1]]],[31,[90,[-1,-2]],[11,[-3,[33,[-1,-4,38,38,-2]]]]],[31,9,10,[88,[-1,-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[111,[-1,-2]],-2],[[111,[-1,-2]]],[],43],[[[112,[-1]],-1],[[3,[[112,[-1]],2]]],43],[[[111,[-1,-2]],-2],[[3,[[111,[-1,-2]],2]]],[],43],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[113,[-1,-2]]],[[113,[-1,-2]]],31,31],[[[114,[-1,-2]]],[[114,[-1,-2]]],31,31],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],0,[-1,[[3,[[113,[-2,-3]]]]],46,47,47],[-1,[[3,[[114,[-2,-3]]]]],46,47,47],[[[114,[-1,-2]],[114,[-1,-2]]],44,50,50],[[[114,[-1,-2]],52],55,48,48],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[113,[-1,-2]],[4,[-3]],[35,[[114,[-1,-2]],-2]]],[[3,[[38,[[35,[[114,[-1,-2]],-2]],[49,[30]]]],2]]],[],[],[20,18]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[[[38,[-1,-1]],25],[[113,[-1,-2]]],[],[]],[[-1,-2,-1],[[114,[-1,-2]]],31,43],[[[113,[-1,-2]],[4,[-3]],[35,[[114,[-1,-2]],-2]]],[[3,[[38,[[35,[[114,[-1,-2]],-2]],[49,[30]]]],2]]],[],[],[20,18]],0,[[[113,[-1,-2]],-3],3,70,70,71],[[[114,[-1,-2]],-3],3,70,70,71],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[113,[-1,-2]],-2],[[3,[[113,[-1,-2]],2]]],[],[]],[[[113,[-1,-2]],-2],[[3,[[113,[-1,-2]],2]]],[],[]],[[[113,[-1,-2]],-2],[[3,[[113,[-1,-2]],2]]],[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[115,[-1,-2]]],[[115,[-1,-2]]],31,31],[[[116,[-1,-2]]],[[116,[-1,-2]]],31,31],[[[117,[-1,-2,-3,-4]]],[[117,[-1,-2,-3,-4]]],31,31,31,31],[[[118,[-1,-2]]],[[118,[-1,-2]]],31,31],[[[119,[-1,-2]]],[[119,[-1,-2]]],31,31],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[-1,[[3,[[115,[-2,-3]]]]],46,47,47],[-1,[[3,[[116,[-2,-3]]]]],46,47,47],[-1,[[3,[[117,[-2,-3,-4,-5]]]]],46,47,47,47,47],[-1,[[3,[[118,[-2,-3]]]]],46,47,47],[-1,[[3,[[119,[-2,-3]]]]],46,47,47],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[115,[-6,-4]],[4,[-5]],[33,[-1,-2,38,-3,-4]]],[[3,[[38,[[33,[-1,-2,38,-3,-4]],[49,[30]]]],2]]],[],[],[],[],[20,21],[31,[90,[-1,-4]],[11,[-5,[33,[-1,-2,38,38,-4]]]]]],[[[116,[-6,-3]],[4,[-5]],[33,[-1,-2,38,-4,-3]]],[[3,[[38,[[33,[-1,-2,38,-4,-3]],[49,[30]]]],2]]],[],[],[],[],[20,21],[31,[90,[-1,-3]],[11,[-5,[33,[-1,-2,38,38,-3]]]]]],[[[117,[-5,-1,-3,-2]],[4,[-4]],[33,[-1,-3,38,38,-2]]],[[3,[[38,[[33,[-1,-3,38,38,-2]],[49,[30]]]],2]]],[],[],[],[20,21],[31,[90,[-1,-2]],[11,[[0,[-4,-1,-3,-2]],[33,[-1,-3,38,38,-2]]]]]],[[[118,[-6,-3]],[4,[-5]],[33,[-1,-2,38,-4,-3]]],[[3,[[38,[[33,[-1,-2,38,-4,-3]],[49,[30]]]],2]]],[],[],[],[],[20,21],[31,[90,[-1,-3]],[11,[-5,[33,[-1,-2,38,38,-3]]]]]],[[[119,[-6,-1]],[4,[-2]],[33,[-3,-5,38,-4,-1]]],[[3,[[38,[[33,[-3,-5,38,-4,-1]],[49,[30]]]],2]]],[],[20,21,22],[31,9,10,96,120,88,88,89,121],[31,9,10,88,120,87],[31,9,10,89,88,96],[31,[122,[-1]],[11,[-2,[33,[-3,-5,38,-4,-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,[[115,[-1,-2]]],[],43],[-1,[[116,[-1,-2]]],[],43],[[-1,25],[[117,[-1,-2,-3,-4]]],[],[],[],43],[-1,[[118,[-1,-2]]],[],43],[-1,[[119,[-1,-2]]],[],43],[[[115,[-6,-4]],[4,[-5]],[33,[-1,-2,38,-3,-4]]],[[3,[[38,[[33,[-1,-2,38,-3,-4]],[49,[30]]]],2]]],[],[],[],[],[20,21],[31,[90,[-1,-4]],[11,[-5,[33,[-1,-2,38,38,-4]]]]]],[[[116,[-6,-3]],[4,[-5]],[33,[-1,-2,38,-4,-3]]],[[3,[[38,[[33,[-1,-2,38,-4,-3]],[49,[30]]]],2]]],[],[],[],[],[20,21],[31,[90,[-1,-3]],[11,[-5,[33,[-1,-2,38,38,-3]]]]]],[[[117,[-5,-1,-3,-2]],[4,[-4]],[33,[-1,-3,38,38,-2]]],[[3,[[38,[[33,[-1,-3,38,38,-2]],[49,[30]]]],2]]],[],[],[],[20,21],[31,[90,[-1,-2]],[11,[[0,[-4,-1,-3,-2]],[33,[-1,-3,38,38,-2]]]]]],[[[118,[-6,-3]],[4,[-5]],[33,[-1,-2,38,-4,-3]]],[[3,[[38,[[33,[-1,-2,38,-4,-3]],[49,[30]]]],2]]],[],[],[],[],[20,21],[31,[90,[-1,-3]],[11,[-5,[33,[-1,-2,38,38,-3]]]]]],[[[119,[-6,-1]],[4,[-2]],[33,[-3,-5,38,-4,-1]]],[[3,[[38,[[33,[-3,-5,38,-4,-1]],[49,[30]]]],2]]],[],[20,21,22],[31,9,10,96,120,88,88,89,121],[31,9,10,88,120,87],[31,9,10,89,88,96],[31,[122,[-1]],[11,[-2,[33,[-3,-5,38,-4,-1]]]]]],[[[115,[-1,-2]],-3],3,70,70,71],[[[116,[-1,-2]],-3],3,70,70,71],[[[117,[-1,-2,-3,-4]],-5],3,70,70,70,70,71],[[[118,[-1,-2]],-3],3,70,70,71],[[[119,[-1,-2]],-3],3,70,70,71],[[[115,[-6,-4]],[33,[-1,-2,38,-3,-4]]],36,[],[],[],[],[20,21],[31,[90,[-1,-4]],[11,[-5,[33,[-1,-2,38,38,-4]]]]]],[[[116,[-6,-3]],[33,[-1,-2,38,-4,-3]]],36,[],[],[],[],[20,21],[31,[90,[-1,-3]],[11,[-5,[33,[-1,-2,38,38,-3]]]]]],[[[117,[-5,-1,-3,-2]],[33,[-1,-3,38,38,-2]]],36,[],[],[],[20,21],[31,[90,[-1,-2]],[11,[[0,[-4,-1,-3,-2]],[33,[-1,-3,38,38,-2]]]]]],[[[118,[-6,-3]],[33,[-1,-2,38,-4,-3]]],36,[],[],[],[],[20,21],[31,[90,[-1,-3]],[11,[-5,[33,[-1,-2,38,38,-3]]]]]],[[[119,[-6,-1]],[33,[-3,-5,38,-4,-1]]],36,[],[20,21,22],[31,9,10,96,120,88,88,89,121],[31,9,10,88,120,87],[31,9,10,89,88,96],[31,[122,[-1]],[11,[-2,[33,[-3,-5,38,-4,-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[118,[-1,-2]],-2],[[3,[[118,[-1,-2]],2]]],[],43],[[[119,[-1,-2]],-2],[[3,[[119,[-1,-2]],2]]],[],43],[[[119,[-1,-2]],-2],[[3,[[119,[-1,-2]],2]]],[],43],[[[117,[-1,-2,-3,-4]],-4],[[3,[[117,[-1,-2,-3,-4]],2]]],[],[],[],43],[[[119,[-1,-2]],-2],[[119,[-1,-2]]],[],43],[[[115,[-1,-2]],-2],[[3,[[115,[-1,-2]],2]]],[],43],[[[117,[-1,-2,-3,-4]],-4],[[3,[[117,[-1,-2,-3,-4]],2]]],[],[],[],43],[[[118,[-1,-2]],-2],[[3,[[118,[-1,-2]],2]]],[],43],[[[115,[-1,-2]],-2],[[3,[[115,[-1,-2]],2]]],[],43],[[[116,[-1,-2]],-2],[[3,[[116,[-1,-2]],2]]],[],43],[[[117,[-1,-2,-3,-4]],-4],[[3,[[117,[-1,-2,-3,-4]],2]]],[],[],[],43],[[[118,[-1,-2]],-2],[[3,[[118,[-1,-2]],2]]],[],43],[[[119,[-1,-2]],-2],[[3,[[119,[-1,-2]],2]]],[],43],0,0,0,0,0,0,0,0,0,[-1,[[3,[2]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[123,[-1]]],[[123,[-1]]],31],[[[124,[-1,-2]]],[[124,[-1,-2]]],31,31],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[],[[123,[-1]]],[]],[-1,[[3,[[123,[-2]]]]],46,47],[-1,[[3,[[124,[-2,-3]]]]],46,47,47],[[[123,[-1]],[123,[-1]]],44,50],[[[123,[-1]],52],55,48],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[124,[-1,-2]],[4,[-3]],[33,[-4,38,38,38,-1]]],[[3,[[38,[[33,[-4,38,38,38,-1]],[49,[30]]]],2]]],43,[125,9],[20,13],31],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[-1,[[3,[[124,[-1,126]],2]]],43],[[-1,-2],[[3,[[124,[-1,-2]],2]]],43,[]],[[[124,[-1,-2]],[4,[-3]],[33,[-4,38,38,38,-1]]],[[3,[[38,[[33,[-4,38,38,38,-1]],[49,[30]]]],2]]],43,[125,9],[20,13],31],[[[123,[-1]],-2],3,70,71],[[[124,[-1,-2]],-3],3,70,70,71],[[[124,[-1,-2]],[33,[-3,38,38,38,-1]]],36,43,[125,9],31],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[124,[-1,-2]],63],[[124,[-1,-2]]],43,[]],[[[124,[-1,-2]],63],[[124,[-1,-2]]],43,[]],[[[124,[-1,-2]],63],[[124,[-1,-2]]],43,[]],[[[124,[-1,-2]],63],[[124,[-1,-2]]],43,[]],[[[124,[-1,-2]],63],[[124,[-1,-2]]],43,[]],[[[124,[-1,-2]],[123,[-1]]],[[124,[-1,-2]]],43,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[127,[-1]]],[[127,[-1]]],31],[[[128,[-1]]],[[128,[-1]]],31],[[[129,[-1,-2]]],[[129,[-1,-2]]],31,31],[[[130,[-1,-2]]],[[130,[-1,-2]]],31,31],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[-1,-2],38,[],[]],[[],[[127,[-1]]],45],[[],[[128,[-1]]],45],[[],[[129,[-1,-2]]],45,45],[-1,[[3,[[127,[-2]]]]],46,47],[-1,[[3,[[128,[-2]]]]],46,47],[-1,[[3,[[129,[-2,-3]]]]],46,47,47],[-1,[[3,[[130,[-2,-3]]]]],46,47,47],[[[127,[-1]],[127,[-1]]],44,50],[[[128,[-1]],[128,[-1]]],44,50],[[[127,[-1]],52],55,48],[[[128,[-1]],52],55,48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[129,[-2,-1]],[4,[-3]],[33,[-2,-2,38,-4,-1]]],[[3,[[38,[[33,[-2,-2,38,-4,-1]],[49,[30]]]],2]]],43,[],[],[[88,[-2,-2]]]],[[[130,[-6,-1]],[4,[-2]],[33,[-3,-4,38,-5,-1]]],[[3,[[38,[[33,[-3,-4,38,-5,-1]],[49,[30]]]],2]]],43,[20,21,22],[31,48,9,10,89,88,88,120],[31,9,10],[31,9,10,[88,[-3,-3]]],[31,[122,[-1]],[11,[-2,[33,[-3,-4,38,-5,-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[-1,44,[]],[[],[[127,[-1]]],43],[[],[[128,[-1]]],43],[[],[[129,[-2,-1]]],43,[]],[-1,[[130,[-1,-2]]],[],43],[[[127,[-1]],[4,[-2]],[33,[-3,-5,38,-4,-1]]],[[3,[[38,[[33,[-3,-5,38,-4,-1]],[49,[30]]]],2]]],43,[21,22],[],[],[]],[[[128,[-1]],[4,[-2]],[33,[-3,-3,38,-4,-1]]],[[3,[[38,[[33,[-3,-3,38,-4,-1]],[49,[30]]]],2]]],43,[21,22],[],[]],[[[129,[-2,-1]],[4,[-3]],[33,[-2,-2,38,-4,-1]]],[[3,[[38,[[33,[-2,-2,38,-4,-1]],[49,[30]]]],2]]],43,[],[],[[88,[-2,-2]]]],[[[130,[-6,-1]],[4,[-2]],[33,[-3,-4,38,-5,-1]]],[[3,[[38,[[33,[-3,-4,38,-5,-1]],[49,[30]]]],2]]],43,[20,21,22],[31,48,9,10,89,88,88,120],[31,9,10],[31,9,10,[88,[-3,-3]]],[31,[122,[-1]],[11,[-2,[33,[-3,-4,38,-5,-1]]]]]],[[[127,[-1]],[127,[-1]]],[[49,[39]]],131],[[[128,[-1]],[128,[-1]]],[[49,[39]]],131],[[-1,-1,-1,-1],-1,43],[[[127,[-1]],-2],3,70,71],[[[128,[-1]],-2],3,70,71],[[[129,[-1,-2]],-3],3,70,70,71],[[[130,[-1,-2]],-3],3,70,70,71],[[-1,-2],38,[],[]],[[[127,[-1]],-1],38,43],[[[128,[-1]],-1],38,43],[[[129,[-1,-2]],-2],38,[],43],[[[127,[-1]],[33,[-2,-4,38,-3,-1]]],36,43,[],[],[]],[[[128,[-1]],[33,[-2,-2,38,-3,-1]]],36,43,[],[]],[[[129,[-2,-1]],[33,[-2,-2,38,-3,-1]]],36,43,[],[[88,[-2,-2]]]],[[[130,[-6,-1]],[33,[-3,-4,38,-5,-1]]],36,43,[20,21,22],[31,48,9,10,89,88,88,120],[31,9,10],[31,9,10,[88,[-3,-3]]],[31,[122,[-1]],[11,[-2,[33,[-3,-4,38,-5,-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,[[49,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[129,[-2,-1]],-1],[[3,[[129,[-2,-1]],2]]],43,[]],[[[130,[-1,-2]],-2],[[3,[[130,[-1,-2]],2]]],[],43],[[[129,[-2,-1]],63],[[129,[-2,-1]]],43,[]],[[[130,[-1,-2]],-2],[[3,[[130,[-1,-2]],2]]],[],43],[[[130,[-1,-2]],-2],[[3,[[130,[-1,-2]],2]]],[],43]],"c":[],"p":[[3,"Vec",1755],[3,"Error",8],[4,"Result",1756],[3,"Problem",8],[8,"LinearProgram",8],[3,"Executor",8],[4,"ObserverMode",668],[8,"State",8],[8,"SerializeAlias",8],[8,"DeserializeOwnedAlias",8],[8,"Solver",8],[8,"Observe",668],[8,"Anneal",1591],[8,"Operator",8],[8,"Error",1757],[3,"Backtrace",1758],[15,"slice"],[8,"SyncAlias",8],[8,"Borrow",1759],[8,"CostFunction",8],[8,"Gradient",8],[8,"Hessian",8],[8,"Jacobian",8],[15,"str"],[15,"usize"],[8,"FnOnce",1760],[3,"Chain",1761],[8,"Checkpoint",611],[4,"KvValue",8],[3,"KV",8],[8,"Clone",1762],[3,"OptimizationResult",8],[3,"IterState",8],[3,"LinearProgramState",8],[3,"PopulationState",8],[4,"TerminationStatus",8],[4,"TerminationReason",8],[15,"tuple"],[4,"Ordering",1763],[8,"Display",1764],[8,"Send",1765],[8,"Sync",1765],[8,"ArgminFloat",8],[15,"bool"],[8,"Default",1766],[8,"Deserializer",1767],[8,"Deserialize",1767],[8,"Debug",1764],[4,"Option",1768],[8,"PartialEq",1763],[8,"IntoIterator",1769],[3,"Formatter",1764],[3,"Error",1764],[4,"ArgminError",8],[6,"Result",1764],[15,"never"],[15,"f32"],[15,"u32"],[3,"String",1770],[15,"i64"],[15,"i32"],[15,"f64"],[15,"u64"],[3,"HashMap",1771],[3,"Duration",1772],[8,"Hasher",1773],[3,"Record",1774],[8,"Serializer",1774],[6,"Result",1774],[8,"Serialize",1775],[8,"Serializer",1775],[3,"TypeId",1776],[3,"FileCheckpoint",611],[4,"CheckpointingFrequency",611],[8,"AsRef",1777],[3,"Observers",668],[3,"WriteToFile",720],[4,"WriteToFileSerializer",720],[3,"SlogLogger",761],[3,"TestProblem",783],[3,"TestSparseProblem",783],[3,"TestSolver",783],[3,"BrentOpt",873],[3,"BrentRoot",873],[3,"ConjugateGradient",916],[3,"NonlinearConjugateGradient",916],[8,"ArgminMul",1778],[8,"ArgminDot",1778],[8,"ArgminL2Norm",1778],[8,"LineSearch",1161],[8,"NLCGBetaUpdate",962],[3,"FletcherReeves",962],[3,"PolakRibiere",962],[3,"PolakRibierePlus",962],[3,"HestenesStiefel",962],[8,"ArgminSub",1778],[3,"GaussNewtonLS",1052],[3,"GaussNewton",1052],[3,"GoldenSectionSearch",1098],[3,"SteepestDescent",1121],[3,"Landweber",1141],[3,"BacktrackingLineSearch",1161],[3,"HagerZhangLineSearch",1161],[3,"MoreThuenteLineSearch",1161],[8,"LineSearchCondition",1250],[3,"ArmijoCondition",1250],[3,"GoldsteinCondition",1250],[3,"StrongWolfeCondition",1250],[3,"WolfeCondition",1250],[3,"NelderMead",1349],[3,"NewtonCG",1376],[3,"Newton",1376],[3,"ParticleSwarm",1421],[3,"Particle",1421],[3,"BFGS",1468],[3,"DFP",1468],[3,"LBFGS",1468],[3,"SR1",1468],[3,"SR1TrustRegion",1468],[8,"ArgminAdd",1778],[8,"ArgminZeroLike",1778],[8,"TrustRegionRadius",1649],[4,"SATempFunc",1591],[3,"SimulatedAnnealing",1591],[8,"Rng",1779],[3,"Xoshiro256PlusPlus",1780],[3,"CauchyPoint",1649],[3,"Dogleg",1649],[3,"Steihaug",1649],[3,"TrustRegion",1649],[8,"PartialOrd",1763],[13,"InvalidParameter",604],[13,"NotImplemented",604],[13,"NotInitialized",604],[13,"ConditionViolated",604],[13,"CheckpointNotFound",604],[13,"PotentialBug",604],[13,"ImpossibleError",604]],"b":[[77,"impl-AsRef%3Cdyn+Error%3E-for-Error"],[78,"impl-AsRef%3Cdyn+Error+%2B+Send+%2B+Sync%3E-for-Error"],[196,"impl-Debug-for-Error"],[197,"impl-Display-for-Error"],[198,"impl-Debug-for-ArgminError"],[199,"impl-Display-for-ArgminError"],[200,"impl-Display-for-KvValue"],[201,"impl-Debug-for-KvValue"],[202,"impl-Display-for-KV"],[203,"impl-Debug-for-KV"],[209,"impl-Debug-for-TerminationStatus"],[210,"impl-Display-for-TerminationStatus"],[211,"impl-Debug-for-TerminationReason"],[212,"impl-Display-for-TerminationReason"],[218,"impl-From%3Cf32%3E-for-KvValue"],[220,"impl-From%3Cu32%3E-for-KvValue"],[221,"impl-From%3CString%3E-for-KvValue"],[222,"impl-From%3Ci64%3E-for-KvValue"],[223,"impl-From%3Ci32%3E-for-KvValue"],[224,"impl-From%3Cbool%3E-for-KvValue"],[225,"impl-From%3C%26str%3E-for-KvValue"],[226,"impl-From%3Cf64%3E-for-KvValue"],[227,"impl-From%3Cu64%3E-for-KvValue"],[255,"impl-State-for-IterState%3CP,+G,+J,+H,+F%3E"],[256,"impl-IterState%3CP,+G,+J,+H,+F%3E"],[258,"impl-PopulationState%3CP,+F%3E"],[259,"impl-State-for-PopulationState%3CP,+F%3E"],[266,"impl-IterState%3CP,+G,+J,+H,+F%3E"],[267,"impl-State-for-IterState%3CP,+G,+J,+H,+F%3E"],[269,"impl-PopulationState%3CP,+F%3E"],[270,"impl-State-for-PopulationState%3CP,+F%3E"],[313,"impl-IterState%3CP,+G,+J,+H,+F%3E"],[314,"impl-State-for-IterState%3CP,+G,+J,+H,+F%3E"],[316,"impl-State-for-PopulationState%3CP,+F%3E"],[317,"impl-PopulationState%3CP,+F%3E"],[632,"impl-Display-for-CheckpointingFrequency"],[633,"impl-Debug-for-CheckpointingFrequency"]]},\
"argmin_math":{"doc":"argmin-math provides mathematics related abstractions â€¦","t":"IIIIIIIIIIIIIIIIIIIKKKKKKKKKKKKKKKKKKKKK","n":["ArgminAdd","ArgminConj","ArgminDiv","ArgminDot","ArgminEye","ArgminInv","ArgminL1Norm","ArgminL2Norm","ArgminMinMax","ArgminMul","ArgminRandom","ArgminScaledAdd","ArgminScaledSub","ArgminSignum","ArgminSub","ArgminTranspose","ArgminWeightedDot","ArgminZero","ArgminZeroLike","add","conj","div","dot","eye","eye_like","inv","l1_norm","l2_norm","max","min","mul","rand_from_range","scaled_add","scaled_sub","signum","sub","t","weighted_dot","zero","zero_like"],"q":[[0,"argmin_math"],[40,"anyhow"],[41,"core::result"]],"d":["Add a <code>T</code> to <code>self</code>","Return the conjugate","(Pointwise) Divide a <code>T</code> by <code>self</code>","Dot/scalar product of <code>T</code> and <code>self</code>","Identity matrix","Compute the inverse (<code>T</code>) of <code>self</code>","Compute the l1-norm (<code>U</code>) of <code>self</code>","Compute the l2-norm (<code>U</code>) of <code>self</code>","Minimum and Maximum of type <code>T</code>","(Pointwise) Multiply a <code>T</code> with <code>self</code>","Create a random number","Add a <code>T</code> scaled by an <code>U</code> to <code>self</code>","Subtract a <code>T</code> scaled by an <code>U</code> from <code>self</code>","Returns a number that represents the sign of <code>self</code>.","Subtract a <code>T</code> from <code>self</code>","Return the transpose (<code>U</code>) of <code>self</code>","Dot/scalar product of <code>T</code> and <code>self</code> weighted by W (p^TWv)","Return param vector of all zeros (for now, this is a hack. â€¦","Zero for dynamically sized objects","Add a <code>T</code> to <code>self</code>","Return conjugate","(Pointwise) Divide a <code>T</code> by <code>self</code>","Dot/scalar product of <code>T</code> and <code>self</code>","Identity matrix of size <code>n</code>","Identity matrix of same size as <code>self</code>","Compute the inverse","Compute the l1-norm (<code>U</code>) of <code>self</code>","Compute the l2-norm (<code>U</code>) of <code>self</code>","Select piecewise maximum","Select piecewise minimum","(Pointwise) Multiply a <code>T</code> with <code>self</code>","Get a random element between min and max,","Add a <code>T</code> scaled by an <code>U</code> to <code>self</code>","Subtract a <code>T</code> scaled by an <code>U</code> from <code>self</code>","Returns a number that represents the sign of <code>self</code>.","Subtract a <code>T</code> from <code>self</code>","Transpose","Dot/scalar product of <code>T</code> and <code>self</code>","Return zero(s)","Return zero(s)"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,6,7,8,8,9,10,11,12,12,13,14,15,16,17,18,19,20,21,22],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],-3,[],[],[]],[-1,-1,[]],[[-1,-2],-3,[],[],[]],[[-1,-2],-3,[],[],[]],[1,-1,[]],[-1,-1,[]],[-1,[[3,[-2,2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-2],-3,[],[],[]],[[-1,-1],-1,[]],[[-1,-2,-3],-4,[],[],[],[]],[[-1,-2,-3],-4,[],[],[],[]],[-1,-1,[]],[[-1,-2],-3,[],[],[]],[-1,-2,[],[]],[[-1,-2,-3],-4,[],[],[],[]],[[],-1,[]],[-1,-1,[]]],"c":[],"p":[[15,"usize"],[3,"Error",40],[4,"Result",41],[8,"ArgminAdd",0],[8,"ArgminConj",0],[8,"ArgminDiv",0],[8,"ArgminDot",0],[8,"ArgminEye",0],[8,"ArgminInv",0],[8,"ArgminL1Norm",0],[8,"ArgminL2Norm",0],[8,"ArgminMinMax",0],[8,"ArgminMul",0],[8,"ArgminRandom",0],[8,"ArgminScaledAdd",0],[8,"ArgminScaledSub",0],[8,"ArgminSignum",0],[8,"ArgminSub",0],[8,"ArgminTranspose",0],[8,"ArgminWeightedDot",0],[8,"ArgminZero",0],[8,"ArgminZeroLike",0]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
