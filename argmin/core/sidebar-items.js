window.SIDEBAR_ITEMS = {"enum":[["ArgminError","Argmin error type"],["KvValue","Types available for use in `KV`."],["TerminationReason","Reasons for optimization algorithms to stop"],["TerminationStatus","Status of optimization execution"]],"mod":[["checkpointing","Checkpointing"],["macros","Macros"],["observers","Observers"],["test_utils","Convenience utilities for testing"]],"struct":[["Error","The `Error` type, a wrapper around a dynamic error type."],["Executor","Solves an optimization problem with a solver"],["IterState","Maintains the state from iteration to iteration of a solver"],["KV","A simple key-value storage"],["LinearProgramState","Maintains the state from iteration to iteration of a solver"],["OptimizationResult","Result of an optimization returned by after running an `Executor`."],["PopulationState","Maintains the state from iteration to iteration of a population-based solver"],["Problem","Wrapper around problems defined by users."]],"trait":[["ArgminFloat","An alias for float types (`f32`, `f64`) which combines multiple commonly needed traits from `num_traits`, `std::fmt` and for serialization/deserialization (the latter only if the `serde1` feature is enabled). It is automatically implemented for all types which fulfill the trait bounds."],["CostFunction","Defines computation of a cost function value"],["DeserializeOwnedAlias","Trait alias for `serde`s `DeserializeOwned`."],["Gradient","Defines the computation of the gradient."],["Hessian","Defines the computation of the Hessian."],["Jacobian","Defines the computation of the Jacobian."],["LinearProgram","Defines a linear Program"],["Operator","Defines the application of an operator to a parameter vector."],["SendAlias","Trait alias for `Send`"],["SerializeAlias","Trait alias for `serde`s `Serialize`."],["Solver","The interface all solvers are required to implement."],["State","Minimal interface which struct used for managing state in solvers have to implement."],["SyncAlias","Trait alias for `Sync`"]]};